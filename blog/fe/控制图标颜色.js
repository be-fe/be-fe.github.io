webpackJsonp([22,56],{832:function(n,e){n.exports={content:'<h2 id=背景><a href=#%E8%83%8C%E6%99%AF aria-hidden=true><span class="icon icon-link"></span></a>背景</h2><p>实际项目中，一般都会遇到不同颜色的图标，例如</p><img src=https://eux-public.bj.bcebos.com/2018/06/06/1.png alt width=381 height=107> <img src=https://eux-public.bj.bcebos.com/2018/06/06/2.png alt width=382 height=102><p><em><font color=gray>导航栏图标的不同状态</font></em></p><h2 id=方法><a href=#%E6%96%B9%E6%B3%95 aria-hidden=true><span class="icon icon-link"></span></a>方法</h2><h3 id=方法1><a href=#%E6%96%B9%E6%B3%951 aria-hidden=true><span class="icon icon-link"></span></a>方法1</h3><p>需要UI设计师给出不同颜色的图标，在不同状态下设置不同的元素背景。</p><pre><code data-query={} data-lang>.icon {\n    background-image: url(./home.png);\n}\n\n.icon.active {\n    background-image: url(./home-active.png);\n}\n</code></pre><p>缺点是：当状态改变后，浏览器才去拉取active状态的图片，所以视觉上会有闪动，体验不好</p><h3 id=方法2><a href=#%E6%96%B9%E6%B3%952 aria-hidden=true><span class="icon icon-link"></span></a>方法2</h3><p>将两张图标合成雪碧图</p><pre><code data-query={} data-lang>.icon {\n    background-image: url(./sprite.png);\n    background-position: 0 0;\n}\n\n.icon.active {\n    background-image: url(./home-active.png);\n    background-position: -20px -20px;\n}\n</code></pre><p>优点：解决第一个方法闪动的问题<br>缺点：1. 合成雪碧图需要工作量；2.多了个图标，增加雪碧图的体积</p><h3 id=方法3><a href=#%E6%96%B9%E6%B3%953 aria-hidden=true><span class="icon icon-link"></span></a>方法3</h3><p>CSS3投影---<strong>filter:drop-shadow(color, X-offset, Y-offset)</strong></p><p><strong>color</strong>：投影的颜色<br><strong>X-offset</strong>： X轴偏移量<br><strong>Y-offset</strong>：Y轴偏移量<br></p><p><strong>drop-shadow</strong>：就好像光线照在元素上一样，元素里不透明的地方，光线无法穿透形成投影</p><pre><code data-query={} data-lang>&lt;span class="icon-del">&lt;/span>\n</code></pre><pre><code data-query={} data-lang>.icon-del {\n    background: url(../images/delete.png) no-repeat center;\n    width: 20px;\n    height: 20px;\n    display: inline-block;\n    -webkit-filter: drop-shadow(red 20px 0);\n    filter: drop-shadow(red 20px 0);\n}\n</code></pre><img src=https://eux-public.bj.bcebos.com/2018/06/06/3.png alt width=128 height=76><p>我们可以看到在原图标的右侧，出现红色的投影。现在需要做的是把原来图标隐藏起来</p><pre><code data-query={} data-lang>&lt;span class="icon-wrapper">\n    &lt;span class="icon-del">&lt;/span>\n&lt;/span>\n</code></pre><pre><code data-query={} data-lang>.icon-wrapper {\n    display: inline-block;\n    width: 20px;\n    height: 20px;\n    overflow: hidden;\n    position: relative;\n}\n.icon-del {\n    background: url(../images/delete.png) no-repeat center;\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: -20px;\n    display: inline-block;\n    border-right: 20px solid transparent;\n    -webkit-filter: drop-shadow(red 20px 0);\n    filter: drop-shadow(red 20px 0);\n}\n</code></pre><img src=https://eux-public.bj.bcebos.com/2018/06/06/4.png alt width=418 height=86><p><strong>注意</strong>：图标的增加了个和本身宽度一致的右侧透明边框，让阴影投射在边框上。如果没有右侧边框，则元素完全处于不可见状态，drop-shadow不能生效（设想下，看不见的东西，自然没有投影）</p><p>优点：不需要额外的图标<br>缺点：需要两层DOM结构</p><h3 id=方法4><a href=#%E6%96%B9%E6%B3%954 aria-hidden=true><span class="icon icon-link"></span></a>方法4</h3><p>background-blend-mode: 背景混合模式</p><p>简单来说，元素可以设置多个背景，这些背景按某种模式混合</p><pre><code data-query={} data-lang>&lt;span class="icon-gear">&lt;/span>\n</code></pre><pre><code data-query={} data-lang>.icon-gear {\n    background-image: url(../images/gear.png);\n    background-color: red;\n    background-size: cover;\n    width: 64px;\n    height: 64px;\n    display: inline-block;\n    background-blend-mode: lighten;\n}\n</code></pre><p>图标（注意要求是黑色的图标）设置图片背景和颜色背景，然后按照<em>lighten</em>模式混合</p><p>lighten模式可以简单理解为：当背景叠加时，显示亮色。本例子中，黑色的图标和其他颜色的背景色叠加，自然显示背景色</p><img src=https://eux-public.bj.bcebos.com/2018/06/06/5.png alt width=752 height=298><p>优点：写法简洁<br>缺点：兼容性不好</p>',extra:{"_image-loader_":[]}}}});
//# sourceMappingURL=控制图标颜色.js.map