webpackJsonp([52,56],{802:function(l,a){l.exports={content:'<h2 id=es6-开发环境搭建要点><a href=#es6-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA%E8%A6%81%E7%82%B9 aria-hidden=true><span class="icon icon-link"></span></a>ES6+ 开发环境搭建要点</h2><p>要在我们的实际开发中使用ES6+语法，必须要搭建一个编译环境，将ES6+语法转换为浏览器可执行且兼容性良好的ES5语法才能使用，那么搭建一个ES6+的真实项目开发环境有哪些注意事项呢？</p><h4 id=babel><a href=#babel aria-hidden=true><span class="icon icon-link"></span></a>Babel</h4><p>Babel可以帮我们将大部分的ES6+ 的语法转为ES5，但是需要注意的是，Babel只能转换语法，不能转换API，哪些属于语法，哪些属于API呢？可以认为声明、流程控制、循环、作用域这些相关的都属于语法，而新的数据类型，以及新的对象方法、类方法都属于API。下面这个表大家可以在Babel官网上看到，列出了Babel所能转换的语法。</p><img src=http://qiniu.fe-learn.com/assets/babel.png width=600><p>我们可以直接使用babel的命令行工具，也可以在webpack， gulp等环境下使用相关的babel插件来进行转换。</p><h4 id=babel-polyfill><a href=#babel-polyfill aria-hidden=true><span class="icon icon-link"></span></a>Babel-Polyfill</h4><p>前面我们讲到了，Babel只能转语法，而不能转换API，如果我们想使用ES6+的API，例如<code>Array.from(arguments)</code>就需要使用 Babel-Polyfill，一个类似于ES5-shim的东西。以下是 Babel-Polyfill 可以兼容的API</p><img src=http://qiniu.fe-learn.com/assets/babel-polyfill.png width=600><p>最简单的用法当然是在页面中直接引入</p><pre><code class="hljs language-html"data-query={} data-lang=html><span class=hljs-tag>&lt;<span class=hljs-name>script</span> <span class=hljs-attr>src</span>=<span class=hljs-string>"//cdnhost/babel-polyfill.js"</span>></span><span class=null></span></code></pre><p>或者</p><pre><code class="hljs language-js"data-query={} data-lang=js><span class=hljs-built_in>require</span>(<span class=hljs-string>\'babel-polyfill\'</span>);  <span class=hljs-comment>//commonJS 语法</span>\n<span class=hljs-keyword>import</span> <span class=hljs-string>\'babel-polyfill\'</span>;    <span class=hljs-comment>//ES Modules语法</span></code></pre><p>但是这种引用方式也会带来一些问题，比如我只用到了2、3个新的API，却会把整个Babel-Polyfill引入。Babel-Polyfill的大小还是比较大的，那么我们可以在编译的时候分析，到底用到了哪些新的API，从而只加载我们用到的polyfill。<strong>（使用babel提供的transform-runtime插件）</strong></p><h3 id=模块化编译工具（webpackbrowserfyrollup等）><a href=#%E6%A8%A1%E5%9D%97%E5%8C%96%E7%BC%96%E8%AF%91%E5%B7%A5%E5%85%B7%EF%BC%88webpackbrowserfyrollup%E7%AD%89%EF%BC%89 aria-hidden=true><span class="icon icon-link"></span></a>模块化编译工具（Webpack/Browserfy/Rollup等）</h3><p>我们一般都会在代码中使用ES Modules以增加我们代码的可维护性，如</p><pre><code class="hljs language-js"data-query={} data-lang=js><span class=hljs-keyword>import</span> xxx <span class=hljs-keyword>from</span> <span class=hljs-string>\'xxx.js\'</span>;</code></pre><p>Babel可以帮我们将ES Modules转为CommonJS语法，也可以通过配置选择不进行任何处理。但是不管CommonJS还是ES Modules，浏览器都是不支持的，需要模块化工具将一个个模块按顺序连接成一个完整的、顺序的脚本。在工具选择上需要注意以下几点：</p><ul><li>webpack1和Browserfy都不能处理ES Modules，所以需要Babel将ES Modules转为CommonJS语法后进行二次处理。</li><li>webpack2及以后的版本同时支持ES Modules和CommonJS</li><li>Rollup只支持ES Modules</li></ul><h3 id=更多的shimpolyfill><a href=#%E6%9B%B4%E5%A4%9A%E7%9A%84shimpolyfill aria-hidden=true><span class="icon icon-link"></span></a>更多的shim&amppolyfill</h3><p>除了对ES6+之外，我们还得根据项目情况，添加一些额外的shim或者polyfill。比如fetch、requestAnimationFrame 这种浏览器API，如果我们需要兼容IE8，还需要添加 ES5 shim来兼容更早的JS语法。</p><h3 id=完善的开发环境><a href=#%E5%AE%8C%E5%96%84%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83 aria-hidden=true><span class="icon icon-link"></span></a>完善的开发环境</h3><p>我们引入了 <strong>Babel + Babel-Polyfill + 模块化编译工具 + 其他shim&amppolyfill</strong>就可以实现一个基本的ES6+开发环境，当然我们还需要整合一些其它功能和优化，来组成一个完善的开发环境</p><h5 id=1-dev-server><a href=#1-dev-server aria-hidden=true><span class="icon icon-link"></span></a>1. Dev-server</h5><p>我们在开发过程中需要启动一个dev-server，dev-server除了启动一个静态文件服务器以外还可以帮我们做如下一些事情。</p><ul><li>免刷新热更新</li><li>插入辅助开发工具：如显示本机IP，生成二维码等</li><li>代理服务，解决跨域和身份验证问题</li></ul><h5 id=2-语法转换><a href=#2-%E8%AF%AD%E6%B3%95%E8%BD%AC%E6%8D%A2 aria-hidden=true><span class="icon icon-link"></span></a>2. 语法转换</h5><p>如果我们使用了react、vue、typescript等框架，我们还需要配置相关的语法转换器，通常我们会使用相应的webpack-loader。当然也可以使用其他的转换器转换后再提供给webpack处理。</p><h5 id=3-性能优化><a href=#3-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96 aria-hidden=true><span class="icon icon-link"></span></a>3. 性能优化</h5><p>大量的JS，可能还包括CSS, JSON等文件都需要等待编译后才能看到效果，会比较影响开发效率。我们可以采取以下一些思路进行优化：</p><ul><li>不编译一些肯定不需要编译的东西。</li><li>样式和JS分开编译</li><li>开启多进程提升速度<strong>（如happy-pack）</strong></li><li>使用缓存</li><li>提前对一些依赖预编译，如webpack的dll插件</li></ul><h5 id=4-sourcemap><a href=#4-sourcemap aria-hidden=true><span class="icon icon-link"></span></a>4. sourceMap</h5><p>在开发环境下，我们实际在浏览器上运行的代码并不是源码，而是编译后的结果，因此我们需要生成sourcemap，让我们在debug的时候能够定位到源码的具体哪一行。</p><h5 id=5-其它资源处理><a href=#5-%E5%85%B6%E5%AE%83%E8%B5%84%E6%BA%90%E5%A4%84%E7%90%86 aria-hidden=true><span class="icon icon-link"></span></a>5. 其它资源处理</h5><p>多数项目还需要对html/css/image等资源进行处理，开发环境需要考虑这些点。</p><h5 id=6-devrdqaonline环境区分><a href=#6-devrdqaonline%E7%8E%AF%E5%A2%83%E5%8C%BA%E5%88%86 aria-hidden=true><span class="icon icon-link"></span></a>6. DEV/RD/QA/ONLINE环境区分</h5><p>一般来说，我们在本地开发、开发环境、测试环境、线上环境都有一些不同的配置，同时为了方便debug，我们在本地环境和开发环境一般会有一些日志和辅助debug代码。依赖手工每次在上线的时候进行修改是非常不靠谱的，因此我们的开发脚手架应当包含DEV/RD/QA/ONLINE等环境区分。</p><h5 id=7-自定义动作><a href=#7-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%8A%A8%E4%BD%9C aria-hidden=true><span class="icon icon-link"></span></a>7. 自定义动作</h5><p>我们往往还需要根据具体的情况进行一些操作，如：</p><ul><li>将编译后的代码转换为一个和原来不同的目录结构以适应线上环境</li><li>提供接口，以引入一些其它的插件</li></ul><h3 id=总结><a href=#%E6%80%BB%E7%BB%93 aria-hidden=true><span class="icon icon-link"></span></a>总结</h3><p>总结一下，一个最基本的ES6+的开发环境需要 <strong>Babel + Babel-Polyfill + 模块化编译工具</strong>这三个要素。而一个完善可用的编译环境则需要考虑很多ES6语法转换之外的要点。一般来讲，满足以下的要点，就可以称之为一个比较完善的ES6+的开发环境了。</p><ul><li><strong>Babel</strong></li><li><p><strong>Babel-Polyfill</strong></p><ul><li>直接引用</li><li>transform-runtime</li></ul></li></ul><ul><li><p><strong>模块化编译工具</strong></p><ul><li>Webpack</li><li>Browserfy</li><li>Rollup</li></ul></li><li><p><strong>其他shim&amppolyfill</strong></p><ul><li>ES5-shim</li><li>fetch-ie8</li><li>等等......</li></ul></li><li><p><strong>完善的开发环境</strong></p><ul><li>dev-server</li><li>配置语法转换器</li><li>打包性能优化</li><li>开发环境下的sourceMap</li><li>对样式、图片、HTML等的处理</li><li>测试、线上、本地各个环境的区分</li><li>开放接口，接入其他自定义流程</li></ul></li></ul>',extra:{"_image-loader_":[]}}}});
//# sourceMappingURL=ES6+环境搭建要点.js.map