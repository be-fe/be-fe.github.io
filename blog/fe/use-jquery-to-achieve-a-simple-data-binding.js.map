{"version":3,"sources":["webpack:///blog/fe/use-jquery-to-achieve-a-simple-data-binding.js","webpack:///./doc/fe/use-jquery-to-achieve-a-simple-data-binding.md"],"names":["webpackJsonp","818","module","exports","content","extra","_image-loader_"],"mappings":"AAAAA,cAAc,GAAG,KAEXC,IACA,SAAUC,EAAQC,GCFxBD,EAAAC,SACAC,QAAA,8mGACAC,OACAC","file":"blog/fe/use-jquery-to-achieve-a-simple-data-binding.js","sourcesContent":["webpackJsonp([36,56],{\n\n/***/ 818:\n/***/ (function(module, exports) {\n\n\t/*markdown-loader*/\n\tmodule.exports = {\n\t  \"content\": \"<h2 id=导语><a href=#%E5%AF%BC%E8%AF%AD aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>导语</h2><p>在软件开发中，MVC或者MVVM是经常被用到的设计模式。在web前端开发中，之前我们需要自己写许多代码来完成这项功能。而现在有许多优秀的类库可以帮我们实现这个功能。</p><p>许多优秀的前端框架都提供了强大的数据双向绑定的功能。比如 <strong>Ember.js</strong>， <strong>Angular.js</strong>， <strong>KnockoutJS</strong>。</p><p>如果我们在一些小型的项目中，只是希望某个功能区域有数据双向绑定的功能，是不是就非得使用这么重的框架呢？事实上，我们可以用jQuery来实现一个简单的数据双向绑定的功能。</p><p>从头开始做一个数据双向绑定并不是那么复杂。简单来说，需要实现下面三点：</p><ol start=2><li>我们需要指定View中的UI元素和数据中的属性对应关系。</li><li>我们需要监听View中的UI元素内容以及数据的变化。</li><li>最后就是我们需要把变化通知到所有与之绑定的数据或者UI元素。</li></ol><h2 id=javascript-code><a href=#javascript-code aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>Javascript Code</h2><pre><code data-query={} data-lang>function DataBinder (objectId) {\\n    // 使用jQuery空对象作为监听对象\\n    var pubSub = jQuery({});\\n    //\\n    var dataAttr = 'bind-' + objectId;\\n    var message = objectId + ':change';\\n    // 监听dom中所有元素的 data-binding 属性变化。并由pubSub来处理。\\n    $(document).on('input change', '[data-' + dataAttr + ']', function (event) {\\n        var $ele = $(this);\\n        console.log('$ele', $ele);\\n        pubSub.trigger(message, [$ele.data(dataAttr), $ele.val()]);\\n    });\\n    // pubSub把数据变化推送给所有与之绑定的页面元素\\n    pubSub.on(message, function (event, proName, newValue) {\\n        $('[data-' + dataAttr + '=' + proName + ']').each(function () {\\n            var $ele = $(this);\\n            if($ele.is('input, textarea, select')) {\\n                $ele.val(newValue);\\n            } else {\\n                $ele.html(newValue);\\n            }\\n        })\\n    });\\n    return pubSub;\\n}\\nfunction User(uid) {\\n    var binder = new DataBinder(uid);\\n    var user = {\\n        attributes: {},\\n        set: function (attrName, val) {\\n            this.attributes[attrName] = val;\\n            binder.trigger(uid + ':change', [attrName, val, this]);\\n        },\\n        get: function (attrName) {\\n            return this.attributes[attrName];\\n        },\\n        _binder: binder\\n    }\\n    return user;\\n}\\n</code></pre><p>调用的时候，用uid与之关联。</p><h2 id=javascript-code-1><a href=#javascript-code-1 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>Javascript Code</h2><pre><code data-query={} data-lang>var user = new User('user');\\n$('#btnSet').bind('click', function (event) {\\n    user.set('name', 'Liuyuan211');\\n});\\n</code></pre><h2 id=html><a href=#html aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>Html</h2><pre><code data-query={} data-lang>&lt;div class=\\\"item\\\">\\n    &lt;label>用户名：&lt;/label>&lt;input type=\\\"text\\\" data-bind-user=\\\"name\\\" />&lt;span data-bind-user=\\\"name\\\">&lt;/span>\\n&lt;/div>\\n&lt;div class=\\\"item\\\">\\n    &lt;input type=\\\"button\\\" id=\\\"btnSet\\\" value=\\\"Set\\\" />\\n&lt;/div>\\n</code></pre><p>该例子中，uid就是 <code>data-bind-user=\\\"name\\\"</code> 中的 <code>user</code> ，绑定的页面元素会自动与user对应的属性关联。</p><h2 id=题外话><a href=#%E9%A2%98%E5%A4%96%E8%AF%9D aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>题外话</h2><p>如果项目中需要使用的数据绑定功能更复杂，<a href=http://knockoutjs.com/documentation/observables.html>knockout.js</a> 库也是一个不错的选择。</p><ul><li>免费开源</li><li>javascript原生代码实现，不依赖其他库</li><li>小巧，只有50多K大</li><li>支持几乎所有主流浏览器</li></ul>\",\n\t  \"extra\": {\n\t    \"_image-loader_\": []\n\t  }\n\t}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// blog/fe/use-jquery-to-achieve-a-simple-data-binding.js","/*markdown-loader*/\nmodule.exports = {\n  \"content\": \"<h2 id=导语><a href=#%E5%AF%BC%E8%AF%AD aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>导语</h2><p>在软件开发中，MVC或者MVVM是经常被用到的设计模式。在web前端开发中，之前我们需要自己写许多代码来完成这项功能。而现在有许多优秀的类库可以帮我们实现这个功能。</p><p>许多优秀的前端框架都提供了强大的数据双向绑定的功能。比如 <strong>Ember.js</strong>， <strong>Angular.js</strong>， <strong>KnockoutJS</strong>。</p><p>如果我们在一些小型的项目中，只是希望某个功能区域有数据双向绑定的功能，是不是就非得使用这么重的框架呢？事实上，我们可以用jQuery来实现一个简单的数据双向绑定的功能。</p><p>从头开始做一个数据双向绑定并不是那么复杂。简单来说，需要实现下面三点：</p><ol start=2><li>我们需要指定View中的UI元素和数据中的属性对应关系。</li><li>我们需要监听View中的UI元素内容以及数据的变化。</li><li>最后就是我们需要把变化通知到所有与之绑定的数据或者UI元素。</li></ol><h2 id=javascript-code><a href=#javascript-code aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>Javascript Code</h2><pre><code data-query={} data-lang>function DataBinder (objectId) {\\n    // 使用jQuery空对象作为监听对象\\n    var pubSub = jQuery({});\\n    //\\n    var dataAttr = 'bind-' + objectId;\\n    var message = objectId + ':change';\\n    // 监听dom中所有元素的 data-binding 属性变化。并由pubSub来处理。\\n    $(document).on('input change', '[data-' + dataAttr + ']', function (event) {\\n        var $ele = $(this);\\n        console.log('$ele', $ele);\\n        pubSub.trigger(message, [$ele.data(dataAttr), $ele.val()]);\\n    });\\n    // pubSub把数据变化推送给所有与之绑定的页面元素\\n    pubSub.on(message, function (event, proName, newValue) {\\n        $('[data-' + dataAttr + '=' + proName + ']').each(function () {\\n            var $ele = $(this);\\n            if($ele.is('input, textarea, select')) {\\n                $ele.val(newValue);\\n            } else {\\n                $ele.html(newValue);\\n            }\\n        })\\n    });\\n    return pubSub;\\n}\\nfunction User(uid) {\\n    var binder = new DataBinder(uid);\\n    var user = {\\n        attributes: {},\\n        set: function (attrName, val) {\\n            this.attributes[attrName] = val;\\n            binder.trigger(uid + ':change', [attrName, val, this]);\\n        },\\n        get: function (attrName) {\\n            return this.attributes[attrName];\\n        },\\n        _binder: binder\\n    }\\n    return user;\\n}\\n</code></pre><p>调用的时候，用uid与之关联。</p><h2 id=javascript-code-1><a href=#javascript-code-1 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>Javascript Code</h2><pre><code data-query={} data-lang>var user = new User('user');\\n$('#btnSet').bind('click', function (event) {\\n    user.set('name', 'Liuyuan211');\\n});\\n</code></pre><h2 id=html><a href=#html aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>Html</h2><pre><code data-query={} data-lang>&lt;div class=\\\"item\\\">\\n    &lt;label>用户名：&lt;/label>&lt;input type=\\\"text\\\" data-bind-user=\\\"name\\\" />&lt;span data-bind-user=\\\"name\\\">&lt;/span>\\n&lt;/div>\\n&lt;div class=\\\"item\\\">\\n    &lt;input type=\\\"button\\\" id=\\\"btnSet\\\" value=\\\"Set\\\" />\\n&lt;/div>\\n</code></pre><p>该例子中，uid就是 <code>data-bind-user=\\\"name\\\"</code> 中的 <code>user</code> ，绑定的页面元素会自动与user对应的属性关联。</p><h2 id=题外话><a href=#%E9%A2%98%E5%A4%96%E8%AF%9D aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>题外话</h2><p>如果项目中需要使用的数据绑定功能更复杂，<a href=http://knockoutjs.com/documentation/observables.html>knockout.js</a> 库也是一个不错的选择。</p><ul><li>免费开源</li><li>javascript原生代码实现，不依赖其他库</li><li>小巧，只有50多K大</li><li>支持几乎所有主流浏览器</li></ul>\",\n  \"extra\": {\n    \"_image-loader_\": []\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/picidae/lib/lib/loaders/markdown-loader!./doc/fe/use-jquery-to-achieve-a-simple-data-binding.md\n// module id = 818\n// module chunks = 36"],"sourceRoot":""}