{"version":3,"sources":["webpack:///blog/fe/利用-javascript-实现富文本编辑器.js","webpack:///./doc/fe/利用-javascript-实现富文本编辑器.md"],"names":["webpackJsonp","824","module","exports","content","extra","_image-loader_"],"mappings":"AAAAA,cAAc,GAAG,KAEXC,IACA,SAAUC,EAAQC,GCFxBD,EAAAC,SACAC,QAAA,ou5BACAC,OACAC","file":"blog/fe/利用-javascript-实现富文本编辑器.js","sourcesContent":["webpackJsonp([30,56],{\n\n/***/ 824:\n/***/ (function(module, exports) {\n\n\t/*markdown-loader*/\n\tmodule.exports = {\n\t  \"content\": \"<p>近期项目中需要开发一个兼容PC和移动端的富文本编辑器，其中包含了一些特殊的定制功能。考察了下现有的js富文本编辑器，桌面端的很多，移动端的几乎没有。桌面端以UEditor为代表。但是我们并不打算考虑兼容性，所以没有必要采用UEditor这么重的插件。为此决定自研一个富文本编辑器。本文，主要介绍如何实现富文本编辑器，和解决一些不同浏览器和设备之间的bug。</p><h1 id=准备阶段><a href=#%E5%87%86%E5%A4%87%E9%98%B6%E6%AE%B5 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>准备阶段</h1><p>在现代浏览器中已经为我们准备好了许多API来让 html 支持富文本编辑功能，我们没有必要自己完成全部内容。</p><h2 id=contenteditabletrue><a href=#contenteditabletrue aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>contenteditable=\\\"true\\\"</h2><p>首先我们需要让一个 <code>div</code> 成为可编辑状态，加入<code>contenteditable=\\\"true\\\"</code> 属性即可。</p><pre><code class=\\\"hljs language-html\\\"data-query={} data-lang=html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>contenteditable</span>=<span class=hljs-string>\\\"true\\\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\\\"rich-editor\\\"</span>></span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span></code></pre><p>在这样的 <code>&lt;div></code> 中插入任何节点都将默认是可编辑状态的。如果想插入不可编辑的节点，我们就需要指定插入节点的属性为 <code>contenteditable=\\\"false\\\"</code>。</p><h2 id=光标操作><a href=#%E5%85%89%E6%A0%87%E6%93%8D%E4%BD%9C aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>光标操作</h2><p>作为富文本编辑器，开发者需要有能力控制光标的各种状态信息，位置信息等。浏览器提供了 <code>selection</code> 对象和 <code>range</code> 对象来操作光标。</p><h3 id=selection-对象><a href=#selection-%E5%AF%B9%E8%B1%A1 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>selection 对象</h3><p>Selection对象表示用户选择的文本范围或插入符号的当前位置。它代表页面中的文本选区，可能横跨多个元素。文本选区由用户拖拽鼠标经过文字而产生。<br>获得一个 selection 对象</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection();</code></pre><p>通常情况下我们不会直接操作 <code>selection</code> 对象，而是需要操作用 <code>seleciton</code> 对象所对应的用户选择的 <code>ranges</code> (区域)，俗称”拖蓝“。获取方式如下：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>let</span> range = selection.getRangeAt(<span class=hljs-number>0</span>);</code></pre><p>由于浏览器当前可能存在多个文本选取，所以 <code>getRangeAt</code> 函数接受一个索引值。在富文本编辑其中，我们不考虑多选取的可能性。</p><p>selection 对象还有两个重要的方法， <code>addRange</code> 和 <code>removeAllRanges</code>。分别用于向当前选取添加一个 range 对象和 删除所有 range 对象。之后你会看到他们的用途。</p><h3 id=range-对象><a href=#range-%E5%AF%B9%E8%B1%A1 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>range 对象</h3><p>通过 selection 对象获得的 range 对象才是我们操作光标的重点。Range表示包含节点和部分文本节点的文档片段。初见 range 对象你有可能会感到陌生又熟悉，在哪儿看见过呢？作为一个前端工程师，想必你一定拜读过《javascript 高级程序设计第三版》 这本书。在第12.4节，作者为我们介绍了 DOM2 级提供的 range 接口，用来更好的控制页面。反正我当时看的一脸？？？？这个有啥用，也没有这种需求啊。这里我们就大量的用到这个对象。对于下面节点：</p><pre><code class=\\\"hljs language-html\\\"data-query={} data-lang=html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>contenteditable</span>=<span class=hljs-string>\\\"true\\\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\\\"rich-editor\\\"</span>></span>\\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>></span>百度EUX团队<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>></span>\\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span></code></pre><p>光标位置如图所示：<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/a.png alt width=237 height=47> 打印出此时的 range 对象：<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/b.png alt width=762 height=132></p><p>其中属性含义如下：</p><ul><li>startContainer: range 范围的起始节点。</li><li>endContainer: range 范围的结束节点</li><li>startOffset: range 起点位置的偏移量。</li><li>endOffset: range 终点位置的偏移量。</li><li>commonAncestorContainer: 返回包含 startContainer 和 endContainer 的最深的节点。</li><li>collapsed: 返回一个用于判断 Range 起始位置和终止位置是否相同的布尔值。</li></ul><p>这里我们的 startContainer , endContainer, commonAncestorContainer都为 <code>#text</code> 文本节点 '百度EUX团队'。因为光标在‘度‘字后面，所以startOffset 和 endOffset 均为 2。且没有产生拖蓝，所以 collapsed 的值为 true。我们再看一个产生拖蓝的例子：</p><p>光标位置如图所示：<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/c.png alt width=280 height=46> 打印出此时的 range 对象：<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/d.png alt width=763 height=133></p><p>由于产生了拖蓝 startContainer 和 endContainer 不再一致，collapsed 的值变为了 false。startOffset 和 endOffset 正好代表了拖蓝的起终位置。更多的效果大家自己尝试吧。</p><p>操作一个 range 节点，主要有如下方法：</p><ul><li>setStart(): 设置 Range 的起点</li><li>setEnd(): 设置 Range 的终点</li><li>selectNode(): 设定一个包含节点和节点内容的 Range</li><li>collapse(): 向指定端点折叠该 Range</li><li>insertNode(): 在 Range 的起点处插入节点。</li><li>cloneRange(): 返回拥有和原 Range 相同端点的克隆 Range 对象</li></ul><p>富文本编辑里面常用的就这么多，还有很多方法就不列举了。</p><h4 id=修改光标位置><a href=#%E4%BF%AE%E6%94%B9%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>修改光标位置</h4><p>我们可以通过调用 <code>setStart()</code> 和 <code>setEnd()</code> 方法，来修改一个光标的位置或拖蓝范围。这两个方法接受的参数为各自的起终节点和偏移量。例如我想让光标位置到\\\"百度EUX团队\\\"最末尾，那么可以采用如下方法：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>let</span> range = <span class=hljs-built_in>window</span>.getSelection().getRangeAt(<span class=hljs-number>0</span>),\\n    textEle = range.commonAncestorContainer;\\nrange.setStart(range.startContainer, textEle.length);\\nrange.setEnd(range.endContainer, textEle.length); </code></pre><p>我们加入一个定时器来查看效果：</p><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/e.gif alt width=142 height=30><p>然而这种方式有个局限性，就是当光标所在的节点如果发生了变动。比如被替换或者加入新的节点了，那么再用这种方式就不会有任何效果。为此我们有时候需要一种强制更改光标位置手段, 简要代码如下(实际中你有可能还需要考虑自闭和元素等内容)：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>resetRange</span>(<span class=hljs-params>startContainer, startOffset, endContainer, endOffset</span>) </span>{\\n    <span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection();\\n        selection.removeAllRanges();\\n    <span class=hljs-keyword>let</span> range = <span class=hljs-built_in>document</span>.createRange();\\n    range.setStart(startContainer, startOffset);\\n    range.setEnd(endContainer, endOffset);\\n    selection.addRange(range);\\n}</code></pre><p>我们通过重新创造一个 range 对象并且删除原有的 ranges 来保证光标一定会变动到我们想要的位置。</p><h2 id=修改文本格式><a href=#%E4%BF%AE%E6%94%B9%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>修改文本格式</h2><p>实现富文本编辑器，我们就要能够有修改文档格式的能力，比如加粗，斜体，文本颜色，列表等内容。DOM 为可编辑区提供了 <code>document.execCommand</code> 方法，该方法允许运行命令来操纵可编辑区域的内容。大多数命令影响文档的选择（粗体，斜体等），而其他命令插入新元素（添加链接）或影响整行（缩进）。当使用 contentEditable时，调用 execCommand() 将影响当前活动的可编辑元素。语法如下：</p><blockquote><p>bool = document.execCommand(aCommandName, aShowDefaultUI, aValueArgument)</p></blockquote><ul><li>aCommandName: 一个 DOMString ，命令的名称。可用命令列表请参阅 命令 。</li><li>aShowDefaultUI: 一个 Boolean， 是否展示用户界面，一般为 false。Mozilla 没有实现。</li><li>aValueArgument: 一些命令（例如insertImage）需要额外的参数（insertImage需要提供插入image的url），默认为null。</li></ul><p>总之浏览器能把大部分我们想到的富文本编辑器需要的功能都实现了，这里我就不一一演示了。感兴趣的同学可以查看 <a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand>MDN - document.execCommand</a>。</p><p>到这里，我相信你已经可以做出一个像模像样的富文本编辑器了。想想还挺激动的，但是呢，一切都没有结束，浏览器又一次坑了我们。</p><h1 id=实战开始，填坑的旅途><a href=#%E5%AE%9E%E6%88%98%E5%BC%80%E5%A7%8B%EF%BC%8C%E5%A1%AB%E5%9D%91%E7%9A%84%E6%97%85%E9%80%94 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>实战开始，填坑的旅途</h1><p>就在我们都以为开发如此简单的时候，实际上手却遇到了许多坑。</p><h2 id=修正浏览器的默认效果><a href=#%E4%BF%AE%E6%AD%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E9%BB%98%E8%AE%A4%E6%95%88%E6%9E%9C aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>修正浏览器的默认效果</h2><p>浏览器提供的富文本效果并不总是好用的，下面介绍几个遇到的问题。</p><h3 id=回车换行><a href=#%E5%9B%9E%E8%BD%A6%E6%8D%A2%E8%A1%8C aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>回车换行</h3><p>当我们在编辑其中输入内容并回车换行继续输入后，可编辑框内容生成的节点和我们预期是不符的。<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/f.png alt width=296 height=56><br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/a.png alt width=237 height=47><br>可以看到最先输入的文字没有被包裹起来，而换行产生的内容，包裹元素是 <code>&lt;div></code> 标签。为了能够让文字被 <code>&lt;p></code> 元素包裹起来。 我们要在初始化的时候，向<code>&lt;div></code>默认插入<code>&lt;p>&lt;br>&lt;/p></code> 元素(<code>&lt;br></code>标签用来占位，有内容输入后会自动删除)。这样以后每次回车产生的新内容都会被<code>&lt;p></code> 元素包裹起来(在可编辑状态下，回车换行产生的新结构会默认拷贝之前的内容，包裹节点，类名等各种内容)。<br>我们还需要监听 keyUp 事件下 <code>event.keyCode === 8</code> 删除键。当编辑器中内容全被清空后(delete键也会把<code>&lt;p></code>标签删除)，要重新加入<code>&lt;p>&lt;br>&lt;/p></code>标签，并把光标定位在里面。</p><h3 id=插入-ul-和-ol-位置错误><a href=#%E6%8F%92%E5%85%A5-ul-%E5%92%8C-ol-%E4%BD%8D%E7%BD%AE%E9%94%99%E8%AF%AF aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>插入 ul 和 ol 位置错误</h3><p>当我们调用 <code>document.execCommand(\\\"insertUnorderedList\\\", false, null)</code> 来插入一个列表的时候，新的列表会被插入<code>&lt;p></code>标签中。<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/h.png alt width=215 height=149><br>为此我们需要每次调用该命令前做一次修正，参考代码如下：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>adjustList</span>(<span class=hljs-params></span>) </span>{\\n    <span class=hljs-keyword>let</span> lists = <span class=hljs-built_in>document</span>.querySelectorAll(<span class=hljs-string>\\\"ol, ul\\\"</span>);\\n     <span class=hljs-keyword>for</span> (<span class=hljs-keyword>let</span> i = <span class=hljs-number>0</span>; i &lt; lists.length; i++) {\\n        <span class=hljs-keyword>let</span> ele = lists[i]; <span class=hljs-comment>// ol</span>\\n        <span class=hljs-keyword>let</span> parentNode = ele.parentNode;\\n        <span class=hljs-keyword>if</span> (parentNode.tagName === <span class=hljs-string>'P'</span> &amp&amp parentNode.lastChild === parentNode.firstChild) {\\n                parentNode.insertAdjacentElement(<span class=hljs-string>'beforebegin'</span>, ele);\\n                parentNode.remove()\\n        }\\n    }\\n}</code></pre><p>这里有个附带的小问题，我试图在 <code>&lt;li>&lt;p>&lt;/p>&lt;/li></code> 维护这样的编辑器结构(默认是没有<code>&lt;p></code>标签的)。效果在 chrome 下运行很好。但是在 safari 中，回车永远不会产生新的 <code>&lt;li></code> 标签，这样就是去了该有的列表效果。</p><h3 id=插入分割线><a href=#%E6%8F%92%E5%85%A5%E5%88%86%E5%89%B2%E7%BA%BF aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>插入分割线</h3><p>调用 <code>document.execCommand('insertHorizontalRule', false, null);</code> 会插入一个<code>&lt;hr></code>标签。然而产生的效果却是这样的：<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/i.gif alt width=191 height=60><br>光标和<code>&lt;hr></code>的效果一致了。为此要判断当前光标是否在 <code>&lt;li></code> 里面，如果是则在 <code>&lt;hr></code> 后面追加一个空的文本节点 <code>#text</code> 不是的话追加 <code>&lt;p>&lt;br>&lt;/p></code>。然后将光标定位在里面，可用如下方式查找。</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-comment>/**\\n * 查找父元素\\n * @param {String} root \\n * @param {String | Array} name \\n */</span>\\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>findParentByTagName</span>(<span class=hljs-params>root, name</span>) </span>{\\n    <span class=hljs-keyword>let</span> parent = root;\\n    <span class=hljs-keyword>if</span> (<span class=hljs-keyword>typeof</span> name === <span class=hljs-string>\\\"string\\\"</span>) {\\n        name = [name];\\n    }\\n    <span class=hljs-keyword>while</span> (name.indexOf(parent.nodeName.toLowerCase()) === <span class=hljs-number>-1</span> &amp&amp parent.nodeName !== <span class=hljs-string>\\\"BODY\\\"</span> &amp&amp parent.nodeName !== <span class=hljs-string>\\\"HTML\\\"</span>) {\\n        parent = parent.parentNode;\\n    }\\n    <span class=hljs-keyword>return</span> parent.nodeName === <span class=hljs-string>\\\"BODY\\\"</span> || parent.nodeName === <span class=hljs-string>\\\"HTML\\\"</span> ? <span class=hljs-literal>null</span> : parent;\\n},</code></pre><h3 id=插入链接><a href=#%E6%8F%92%E5%85%A5%E9%93%BE%E6%8E%A5 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>插入链接</h3><p>调用 <code>document.execCommand('createLink', false, url);</code> 方法我们可以插入一个 url 链接，但是该方法不支持插入指定文字的链接。同时对已经有链接的位置可以反复插入新的链接。为此我们需要重写此方法。</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>insertLink</span>(<span class=hljs-params>url, title</span>) </span>{\\n    <span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>document</span>.getSelection(),\\n        range = selection.getRangeAt(<span class=hljs-number>0</span>);\\n    <span class=hljs-keyword>if</span>(range.collapsed) {\\n        <span class=hljs-keyword>let</span> start = range.startContainer,\\n            parent = Util.findParentByTagName(start, <span class=hljs-string>'a'</span>);\\n        <span class=hljs-keyword>if</span>(parent) {\\n            parent.setAttribute(<span class=hljs-string>'src'</span>, url);\\n        }<span class=hljs-keyword>else</span> {\\n            <span class=hljs-keyword>this</span>.insertHTML(<span class=hljs-string>`&lt;a href=\\\"<span class=hljs-subst>${url}</span>\\\"><span class=hljs-subst>${title}</span>&lt;/a>`</span>);\\n        }\\n    }<span class=hljs-keyword>else</span> {\\n        <span class=hljs-built_in>document</span>.execCommand(<span class=hljs-string>'createLink'</span>, <span class=hljs-literal>false</span>, url);\\n    }\\n} </code></pre><h3 id=设置-h1--h6-标题><a href=#%E8%AE%BE%E7%BD%AE-h1--h6-%E6%A0%87%E9%A2%98 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>设置 h1 ~ h6 标题</h3><p>浏览器没有现成的方法，但我们可以借助 <code>document.execCommand('formatBlock', false, tag)</code>, 来实现，代码如下：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>setHeading</span>(<span class=hljs-params>heading</span>) </span>{\\n    <span class=hljs-keyword>let</span> formatTag = heading,\\n        formatBlock = <span class=hljs-built_in>document</span>.queryCommandValue(<span class=hljs-string>\\\"formatBlock\\\"</span>);\\n    <span class=hljs-keyword>if</span> (formatBlock.length > <span class=hljs-number>0</span>  &amp &amp formatBlock.toLowerCase() === formatTag) {\\n        <span class=hljs-built_in>document</span>.execCommand(<span class=hljs-string>'formatBlock'</span>, <span class=hljs-literal>false</span>, <span class=hljs-string>``</span>);\\n    } <span class=hljs-keyword>else</span> {\\n        <span class=hljs-built_in>document</span>.execCommand(<span class=hljs-string>'formatBlock'</span>, <span class=hljs-literal>false</span>, <span class=hljs-string>``</span>);\\n    }\\n}</code></pre><h3 id=插入定制内容><a href=#%E6%8F%92%E5%85%A5%E5%AE%9A%E5%88%B6%E5%86%85%E5%AE%B9 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>插入定制内容</h3><p>当编辑器上传或加载附件的时候，要插入能够展示附件的 <code>&lt;div></code> 节点卡片到编辑中。这里我们借助 <code>document.execCommand('insertHTML', false, html);</code> 来插入内容。为了防止div被编辑，要设置 <code>contenteditable=\\\"false\\\"</code>哦。</p><h3 id=处理-paste-粘贴><a href=#%E5%A4%84%E7%90%86-paste-%E7%B2%98%E8%B4%B4 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>处理 paste 粘贴</h3><p>在富文本编辑器中，粘贴效果默认采用如下规则：</p><ol><li>如果是带有格式的文本，则保留格式(格式会被转换成html标签的形式)</li><li>粘贴图文混排的内容，图片可以显示，src 为图片真实地址。</li><li>通过复制图片来进行粘贴的时候，不能粘入内容</li><li>粘贴其他格式内容，不能粘入内容</li></ol><p>为了能够控制粘贴的内容，我们监听 <code>paste</code> 事件。该事件的 event 对象中会包含一个 clipboardData 剪切板对象。我们可以利用该对象的 getData 方法来获得带有格式和不带格式的内容，如下。</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>let</span> plainText = event.clipboardData.getData(<span class=hljs-string>'text/plain'</span>);  <span class=hljs-comment>// 无格式文本</span>\\n<span class=hljs-keyword>let</span> plainHTML = event.clipboardData.getData(<span class=hljs-string>'text/html'</span>);   <span class=hljs-comment>// 有格式文本</span></code></pre><p>之后调用 <code>document.execCommand('insertText', false, plainText);</code> 或 <code>document.execCommand('insertHTML', false, plainHTML;</code> 来重写编辑上的paste效果。</p><p>然而对于规则 3 ，上述方案就无法处理了。这里我们要引入 <code>event.clipboardData.items</code> 。这是一个数组包含了所有剪切板中的内容对象。比如你复制了一张图片来粘贴，那么 <code>event.clipboardData.items</code> 的长度就为2： <code>items[0]</code> 为图片的名称，items[0].kind 为 'string', items[0].type 为 'text/plain' 或 'text/html'。获取内容方式如下：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript>items[<span class=hljs-number>0</span>].getAsString(<span class=hljs-function><span class=hljs-params>str</span> =></span> {\\n    <span class=hljs-comment>// 处理 str 即可</span>\\n}) </code></pre><p><code>items[1]</code> 为图片的二进制数据，items[1].kind 为'file'， items[1].type 为图片的格式。想要获取里面的内容，我们就需要创建 <code>FileReader</code> 对象了。示例代码如下：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>let</span> file = items[<span class=hljs-number>1</span>].getAsFile();\\n<span class=hljs-comment>// file.size 为文件大小</span>\\n<span class=hljs-keyword>let</span> reader = <span class=hljs-keyword>new</span> FileReader();\\nreader.onload = <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>) </span>{\\n    <span class=hljs-comment>// reader.result 为文件内容，就可以做上传操作了</span>\\n}\\n<span class=hljs-keyword>if</span>(<span class=hljs-regexp>/image/</span>.test(item.type)) {\\n    reader.readAsDataURL(file);   <span class=hljs-comment>// 读取为 base64 格式</span>\\n}</code></pre><p>处理完图片，那么对于复制粘贴其他格式内容会怎么样呢？在 mac 中，如果你复制一个磁盘文件，event.clipboardData.items 的长度为 2。 items[0] 依然为文件名，然而 items[1] 则为图片了，没错，是文件的缩略图。</p><h3 id=输入法处理><a href=#%E8%BE%93%E5%85%A5%E6%B3%95%E5%A4%84%E7%90%86 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>输入法处理</h3><p>当使用输入发的时候，有时候会发生一些意想不到的事情。 比如百度输入法可以输入一张本地图片，为此我们需要监听输入法产生的内容做处理。这里通过如下两个事件处理：</p><ul><li>compositionstart: 当浏览器有非直接的文字输入时, compositionstart事件会以同步模式触发</li><li>compositionend: 当浏览器是直接的文字输入时, compositionend会以同步模式触发</li></ul><h2 id=修复移动端的问题><a href=#%E4%BF%AE%E5%A4%8D%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E9%97%AE%E9%A2%98 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>修复移动端的问题</h2><p>在移动端，富文本编辑器的问题主要集中在光标和键盘上面。我这里介绍几个比较大的坑。</p><h3 id=自动获取焦点><a href=#%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E7%84%A6%E7%82%B9 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>自动获取焦点</h3><p>如果想让我们的编辑器自动获得焦点，弹出软键盘，可以利用 <code>focus()</code> 方法。然而在 ios 下，死活没有结果。这主要是因为 ios safari 中，为了安全考虑不允许代码获得焦点。只能通过用户交互点击才可以。还好，这一限制可以去除：</p><pre><code class=\\\"hljs language-object-c\\\"data-query={} data-lang=object-c>[self.appWebView setKeyboardDisplayRequiresUserAction:NO]</code></pre><h3 id=ios-下回车换行，滚动条不会自动滚动><a href=#ios-%E4%B8%8B%E5%9B%9E%E8%BD%A6%E6%8D%A2%E8%A1%8C%EF%BC%8C%E6%BB%9A%E5%8A%A8%E6%9D%A1%E4%B8%8D%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%8A%A8 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>iOS 下回车换行，滚动条不会自动滚动</h3><p>在 iOS 下，当我们回车换行的时候，滚动条并不会随着滚动下去。这样光标就可能被键盘挡住，体验不好。为了解决这一问题，我们就需要监听 <code>selectionchange</code> 事件，触发时，计算每次光标编辑器顶端距离，之后再调用 window.scroll() 即可解决。问题在于我们要如何计算当前光标的位置，如果仅是计算光标所在父元素的位置很有可能出现偏差(多行文本计算不准)。我们可以通过创建一个临时 <code>&lt;span></code> 元素查到光标位置，计算<code>&lt;span></code>元素的位置即可。代码如下：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>getCaretYPosition</span>(<span class=hljs-params></span>) </span>{\\n    <span class=hljs-keyword>let</span> sel = <span class=hljs-built_in>window</span>.getSelection(),\\n        range = sel.getRangeAt(<span class=hljs-number>0</span>);\\n    <span class=hljs-keyword>let</span> span = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'span'</span>);\\n    range.collapse(<span class=hljs-literal>false</span>);\\n    range.insertNode(span);\\n    <span class=hljs-keyword>var</span> topPosition = span.offsetTop;\\n    span.parentNode.removeChild(span);\\n    <span class=hljs-keyword>return</span> topPosition;\\n}</code></pre><p>正当我开心的时候，安卓端反应，编辑器越编辑越卡。什么鬼？我在 chrome 上线检查了一下，发现 <code>selectionchange</code> 函数一直在运行，不管有没有操作。 在逐一排查的时候发现了这么一个事实。<code>range.insertNode</code> 函数同样触发 <code>selectionchange</code> 事件。这样就形成了一个死循环。这个死循环在 safari 中就不会产生，只出现在 safari 中，为此我们就需要加上浏览器类型判断了。</p><h3 id=键盘弹起遮挡输入部分><a href=#%E9%94%AE%E7%9B%98%E5%BC%B9%E8%B5%B7%E9%81%AE%E6%8C%A1%E8%BE%93%E5%85%A5%E9%83%A8%E5%88%86 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>键盘弹起遮挡输入部分</h3><p>网上对于这个问题主要的方案就是，设置定时器。局限与前端，确实只能这采用这样笨笨的解决。最后我们让 iOS 同学在键盘弹出的时候，将 webview 高度减去软键盘高度就解决了。</p><pre><code class=\\\"hljs language-object-c\\\"data-query={} data-lang=object-c><span class=hljs-symbol>CGFloat</span> webviewY = <span class=hljs-number>64</span>.<span class=hljs-number>0</span> + <span class=hljs-keyword>self.noteSourceView.height;\\n</span><span class=hljs-keyword>self.appWebView.frame </span>= CGRectMake(<span class=hljs-number>0</span>, webviewY, <span class=hljs-keyword>BDScreenWidth, </span><span class=hljs-keyword>BDScreenHeight </span>- webviewY - height)<span class=hljs-comment>; </span></code></pre><h3 id=插入图片失败><a href=#%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>插入图片失败</h3><p>在移动端，通过调用 jsbridge 来唤起相册选择图片。之后调用 <code>insertImage</code> 函数来向编辑器插入图片。然而，插入图片一直失败。最后发现是因为早 safari 下，如果编辑器失去了焦点，那么 <code>selection</code> 和 <code>range</code> 对象将销毁。因此调用 <code>insertImage</code> 时，并不能获得光标所在位置，因此失败。为此需要增加，<code>backupRange()</code> 和 <code>restoreRange()</code> 函数。当页面失去焦点的时候记录 range 信息，插入图片前恢复 range 信息。</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript>backupRange() {\\n    <span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection();\\n    <span class=hljs-keyword>let</span> range = selection.getRangeAt(<span class=hljs-number>0</span>);\\n    <span class=hljs-keyword>this</span>.currentSelection = {\\n        <span class=hljs-string>\\\"startContainer\\\"</span>: range.startContainer,\\n        <span class=hljs-string>\\\"startOffset\\\"</span>: range.startOffset,\\n        <span class=hljs-string>\\\"endContainer\\\"</span>: range.endContainer,\\n        <span class=hljs-string>\\\"endOffset\\\"</span>: range.endOffset\\n    }\\n}\\nrestoreRange() {\\n    <span class=hljs-keyword>if</span> (<span class=hljs-keyword>this</span>.currentSelection) {\\n        <span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection();\\n            selection.removeAllRanges();\\n        <span class=hljs-keyword>let</span> range = <span class=hljs-built_in>document</span>.createRange();\\n        range.setStart(<span class=hljs-keyword>this</span>.currentSelection.startContainer, <span class=hljs-keyword>this</span>.currentSelection.startOffset);\\n        range.setEnd(<span class=hljs-keyword>this</span>.currentSelection.endContainer, <span class=hljs-keyword>this</span>.currentSelection.endOffset);\\n        <span class=hljs-comment>// 向选区中添加一个区域</span>\\n        selection.addRange(range);\\n    }\\n}</code></pre><p>在 chrome 中，失去焦点并不会清除 <code>seleciton</code> 对象和 <code>range</code> 对象，这样我们轻轻松松一个 <code>focus()</code> 就搞定了。</p><p>重要问题就这么多，限于篇幅限制其他的问题省略了。总体来说，填坑花了开发的大部分时间。</p><h1 id=其他功能><a href=#%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>其他功能</h1><p>基础功能修修补补以后，实际项目中有可能遇到一些其他的需求，比如当前光标所在文字内容状态啊，图片拖拽放大啊，待办列表功能，附件卡片等功能啊，markdown切换等等。在了解了js 富文本的种种坑之后，range 对象的操作之后，相信这些问题你都可以轻松解决。这里最后提几个做扩展功能时候遇到的有去的问题。</p><h2 id=回车换行带格式><a href=#%E5%9B%9E%E8%BD%A6%E6%8D%A2%E8%A1%8C%E5%B8%A6%E6%A0%BC%E5%BC%8F aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>回车换行带格式</h2><p>前面已经说过了，富文本编辑器的机制就是这样，当你回车换行的时候新产生的内容和之前的格式一模一样。如果我们利用 <code>.card</code> 类来定义了一个卡片内容，那么换行产生的新的段落都将含有 <code>.card</code> 类且结构也是直接 copy 过来的。我们想要屏蔽这种机制，于是尝试在 keydown 的阶段做处理(如果在 keyup 阶段处理用户体验不好)。然而，并没有什么用，因为用户自定义的 keydown 事件要在 浏览器富文本的默认 keydown 事件之前触发，这样你就做不了任何处理。<br>为此我们为这类特殊的个体都添加一个 property 属性，添加在 property 上的内容是不会被copy下来的。这样以后就可以区分出来了，从而做对应的处理。</p><h2 id=获取当前光标所在处样式><a href=#%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%85%89%E6%A0%87%E6%89%80%E5%9C%A8%E5%A4%84%E6%A0%B7%E5%BC%8F aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>获取当前光标所在处样式</h2><p>这里主要是考虑 下划线，删除线之类的样式，这些样式都是用标签类描述的，所以要遍历标签层级。直接上代码：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>getCaretStyle</span>(<span class=hljs-params></span>) </span>{\\n    <span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection(),\\n        range = selection.getRangeAt(<span class=hljs-number>0</span>);\\n        aimEle = range.commonAncestorContainer,\\n        tempEle = <span class=hljs-literal>null</span>;\\n    <span class=hljs-keyword>let</span> tags = [<span class=hljs-string>\\\"U\\\"</span>, <span class=hljs-string>\\\"I\\\"</span>, <span class=hljs-string>\\\"B\\\"</span>, <span class=hljs-string>\\\"STRIKE\\\"</span>],\\n        result = [];\\n    <span class=hljs-keyword>if</span>(aimEle.nodeType === <span class=hljs-number>3</span>) {\\n        aimEle = aimEle.parentNode;\\n    }\\n    tempEle = aimEle;\\n    <span class=hljs-keyword>while</span>(block.indexOf(tempEle.nodeName.toLowerCase()) === <span class=hljs-number>-1</span>) {\\n        <span class=hljs-keyword>if</span>(tags.indexOf(tempEle.nodeName) !== <span class=hljs-number>-1</span>) {\\n            result.push(tempEle.nodeName);\\n        }\\n        tempEle = tempEle.parentNode;\\n    }\\n    <span class=hljs-keyword>let</span> viewStyle = {\\n        <span class=hljs-string>\\\"italic\\\"</span>: result.indexOf(<span class=hljs-string>\\\"I\\\"</span>) !== <span class=hljs-number>-1</span> ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>,\\n        <span class=hljs-string>\\\"underline\\\"</span>: result.indexOf(<span class=hljs-string>\\\"U\\\"</span>) !== <span class=hljs-number>-1</span> ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>,\\n        <span class=hljs-string>\\\"bold\\\"</span>: result.indexOf(<span class=hljs-string>\\\"B\\\"</span>) !== <span class=hljs-number>-1</span> ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>,\\n        <span class=hljs-string>\\\"strike\\\"</span>: result.indexOf(<span class=hljs-string>\\\"STRIKE\\\"</span>) !== <span class=hljs-number>-1</span> ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>\\n    }\\n    <span class=hljs-keyword>let</span> styles = <span class=hljs-built_in>window</span>.getComputedStyle(aimEle, <span class=hljs-literal>null</span>);\\n    viewStyle.fontSize = styles[<span class=hljs-string>\\\"fontSize\\\"</span>],\\n    viewStyle.color = styles[<span class=hljs-string>\\\"color\\\"</span>],\\n    viewStyle.fontWeight = styles[<span class=hljs-string>\\\"fontWeight\\\"</span>],\\n    viewStyle.fontStyle = styles[<span class=hljs-string>\\\"fontStyle\\\"</span>],\\n    viewStyle.textDecoration = styles[<span class=hljs-string>\\\"textDecoration\\\"</span>];\\n    viewStyle.isH1 = Util.findParentByTagName(aimEle, <span class=hljs-string>\\\"h1\\\"</span>) ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>;\\n    viewStyle.isH2 = Util.findParentByTagName(aimEle, <span class=hljs-string>\\\"h2\\\"</span>) ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>;\\n    viewStyle.isP = Util.findParentByTagName(aimEle, <span class=hljs-string>\\\"p\\\"</span>) ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>;\\n    viewStyle.isUl = Util.findParentByTagName(aimEle, <span class=hljs-string>\\\"ul\\\"</span>) ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>;\\n    viewStyle.isOl = Util.findParentByTagName(aimEle, <span class=hljs-string>\\\"ol\\\"</span>) ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>;\\n    <span class=hljs-keyword>return</span> viewStyle;\\n} </code></pre><h1 id=最后说一句><a href=#%E6%9C%80%E5%90%8E%E8%AF%B4%E4%B8%80%E5%8F%A5 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>最后说一句</h1><p>该项目目前提测中，所以呢，一但发现有意思的坑，我会及时补充的。</p><h1 id=参考内容><a href=#%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>参考内容</h1><ul><li><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand>MDN - document.execCommand</a></li><li><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Selection>MDN - selection</a></li><li><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Range>MDN - range</a></li><li><a href=http://frontenddev.org/article/compatible-with-processing-and-chinese-input-method-to-optimize-the-input-events.html>input 事件兼容处理以及中文输入法优化</a></li><li><a href=https://segmentfault.com/a/1190000004288686>js获取剪切板内容，js控制图片粘贴</a></li><li><a href=http://blog.csdn.net/ll845876425/article/details/51884736>iOS UIWebView 全属性详解</a></li></ul>\",\n\t  \"extra\": {\n\t    \"_image-loader_\": []\n\t  }\n\t}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// blog/fe/利用-javascript-实现富文本编辑器.js","/*markdown-loader*/\nmodule.exports = {\n  \"content\": \"<p>近期项目中需要开发一个兼容PC和移动端的富文本编辑器，其中包含了一些特殊的定制功能。考察了下现有的js富文本编辑器，桌面端的很多，移动端的几乎没有。桌面端以UEditor为代表。但是我们并不打算考虑兼容性，所以没有必要采用UEditor这么重的插件。为此决定自研一个富文本编辑器。本文，主要介绍如何实现富文本编辑器，和解决一些不同浏览器和设备之间的bug。</p><h1 id=准备阶段><a href=#%E5%87%86%E5%A4%87%E9%98%B6%E6%AE%B5 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>准备阶段</h1><p>在现代浏览器中已经为我们准备好了许多API来让 html 支持富文本编辑功能，我们没有必要自己完成全部内容。</p><h2 id=contenteditabletrue><a href=#contenteditabletrue aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>contenteditable=\\\"true\\\"</h2><p>首先我们需要让一个 <code>div</code> 成为可编辑状态，加入<code>contenteditable=\\\"true\\\"</code> 属性即可。</p><pre><code class=\\\"hljs language-html\\\"data-query={} data-lang=html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>contenteditable</span>=<span class=hljs-string>\\\"true\\\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\\\"rich-editor\\\"</span>></span><span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span></code></pre><p>在这样的 <code>&lt;div></code> 中插入任何节点都将默认是可编辑状态的。如果想插入不可编辑的节点，我们就需要指定插入节点的属性为 <code>contenteditable=\\\"false\\\"</code>。</p><h2 id=光标操作><a href=#%E5%85%89%E6%A0%87%E6%93%8D%E4%BD%9C aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>光标操作</h2><p>作为富文本编辑器，开发者需要有能力控制光标的各种状态信息，位置信息等。浏览器提供了 <code>selection</code> 对象和 <code>range</code> 对象来操作光标。</p><h3 id=selection-对象><a href=#selection-%E5%AF%B9%E8%B1%A1 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>selection 对象</h3><p>Selection对象表示用户选择的文本范围或插入符号的当前位置。它代表页面中的文本选区，可能横跨多个元素。文本选区由用户拖拽鼠标经过文字而产生。<br>获得一个 selection 对象</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection();</code></pre><p>通常情况下我们不会直接操作 <code>selection</code> 对象，而是需要操作用 <code>seleciton</code> 对象所对应的用户选择的 <code>ranges</code> (区域)，俗称”拖蓝“。获取方式如下：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>let</span> range = selection.getRangeAt(<span class=hljs-number>0</span>);</code></pre><p>由于浏览器当前可能存在多个文本选取，所以 <code>getRangeAt</code> 函数接受一个索引值。在富文本编辑其中，我们不考虑多选取的可能性。</p><p>selection 对象还有两个重要的方法， <code>addRange</code> 和 <code>removeAllRanges</code>。分别用于向当前选取添加一个 range 对象和 删除所有 range 对象。之后你会看到他们的用途。</p><h3 id=range-对象><a href=#range-%E5%AF%B9%E8%B1%A1 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>range 对象</h3><p>通过 selection 对象获得的 range 对象才是我们操作光标的重点。Range表示包含节点和部分文本节点的文档片段。初见 range 对象你有可能会感到陌生又熟悉，在哪儿看见过呢？作为一个前端工程师，想必你一定拜读过《javascript 高级程序设计第三版》 这本书。在第12.4节，作者为我们介绍了 DOM2 级提供的 range 接口，用来更好的控制页面。反正我当时看的一脸？？？？这个有啥用，也没有这种需求啊。这里我们就大量的用到这个对象。对于下面节点：</p><pre><code class=\\\"hljs language-html\\\"data-query={} data-lang=html><span class=hljs-tag>&lt;<span class=hljs-name>div</span> <span class=hljs-attr>contenteditable</span>=<span class=hljs-string>\\\"true\\\"</span> <span class=hljs-attr>id</span>=<span class=hljs-string>\\\"rich-editor\\\"</span>></span>\\n    <span class=hljs-tag>&lt;<span class=hljs-name>p</span>></span>百度EUX团队<span class=hljs-tag>&lt;/<span class=hljs-name>p</span>></span>\\n<span class=hljs-tag>&lt;/<span class=hljs-name>div</span>></span></code></pre><p>光标位置如图所示：<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/a.png alt width=237 height=47> 打印出此时的 range 对象：<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/b.png alt width=762 height=132></p><p>其中属性含义如下：</p><ul><li>startContainer: range 范围的起始节点。</li><li>endContainer: range 范围的结束节点</li><li>startOffset: range 起点位置的偏移量。</li><li>endOffset: range 终点位置的偏移量。</li><li>commonAncestorContainer: 返回包含 startContainer 和 endContainer 的最深的节点。</li><li>collapsed: 返回一个用于判断 Range 起始位置和终止位置是否相同的布尔值。</li></ul><p>这里我们的 startContainer , endContainer, commonAncestorContainer都为 <code>#text</code> 文本节点 '百度EUX团队'。因为光标在‘度‘字后面，所以startOffset 和 endOffset 均为 2。且没有产生拖蓝，所以 collapsed 的值为 true。我们再看一个产生拖蓝的例子：</p><p>光标位置如图所示：<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/c.png alt width=280 height=46> 打印出此时的 range 对象：<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/d.png alt width=763 height=133></p><p>由于产生了拖蓝 startContainer 和 endContainer 不再一致，collapsed 的值变为了 false。startOffset 和 endOffset 正好代表了拖蓝的起终位置。更多的效果大家自己尝试吧。</p><p>操作一个 range 节点，主要有如下方法：</p><ul><li>setStart(): 设置 Range 的起点</li><li>setEnd(): 设置 Range 的终点</li><li>selectNode(): 设定一个包含节点和节点内容的 Range</li><li>collapse(): 向指定端点折叠该 Range</li><li>insertNode(): 在 Range 的起点处插入节点。</li><li>cloneRange(): 返回拥有和原 Range 相同端点的克隆 Range 对象</li></ul><p>富文本编辑里面常用的就这么多，还有很多方法就不列举了。</p><h4 id=修改光标位置><a href=#%E4%BF%AE%E6%94%B9%E5%85%89%E6%A0%87%E4%BD%8D%E7%BD%AE aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>修改光标位置</h4><p>我们可以通过调用 <code>setStart()</code> 和 <code>setEnd()</code> 方法，来修改一个光标的位置或拖蓝范围。这两个方法接受的参数为各自的起终节点和偏移量。例如我想让光标位置到\\\"百度EUX团队\\\"最末尾，那么可以采用如下方法：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>let</span> range = <span class=hljs-built_in>window</span>.getSelection().getRangeAt(<span class=hljs-number>0</span>),\\n    textEle = range.commonAncestorContainer;\\nrange.setStart(range.startContainer, textEle.length);\\nrange.setEnd(range.endContainer, textEle.length); </code></pre><p>我们加入一个定时器来查看效果：</p><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/e.gif alt width=142 height=30><p>然而这种方式有个局限性，就是当光标所在的节点如果发生了变动。比如被替换或者加入新的节点了，那么再用这种方式就不会有任何效果。为此我们有时候需要一种强制更改光标位置手段, 简要代码如下(实际中你有可能还需要考虑自闭和元素等内容)：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>resetRange</span>(<span class=hljs-params>startContainer, startOffset, endContainer, endOffset</span>) </span>{\\n    <span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection();\\n        selection.removeAllRanges();\\n    <span class=hljs-keyword>let</span> range = <span class=hljs-built_in>document</span>.createRange();\\n    range.setStart(startContainer, startOffset);\\n    range.setEnd(endContainer, endOffset);\\n    selection.addRange(range);\\n}</code></pre><p>我们通过重新创造一个 range 对象并且删除原有的 ranges 来保证光标一定会变动到我们想要的位置。</p><h2 id=修改文本格式><a href=#%E4%BF%AE%E6%94%B9%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>修改文本格式</h2><p>实现富文本编辑器，我们就要能够有修改文档格式的能力，比如加粗，斜体，文本颜色，列表等内容。DOM 为可编辑区提供了 <code>document.execCommand</code> 方法，该方法允许运行命令来操纵可编辑区域的内容。大多数命令影响文档的选择（粗体，斜体等），而其他命令插入新元素（添加链接）或影响整行（缩进）。当使用 contentEditable时，调用 execCommand() 将影响当前活动的可编辑元素。语法如下：</p><blockquote><p>bool = document.execCommand(aCommandName, aShowDefaultUI, aValueArgument)</p></blockquote><ul><li>aCommandName: 一个 DOMString ，命令的名称。可用命令列表请参阅 命令 。</li><li>aShowDefaultUI: 一个 Boolean， 是否展示用户界面，一般为 false。Mozilla 没有实现。</li><li>aValueArgument: 一些命令（例如insertImage）需要额外的参数（insertImage需要提供插入image的url），默认为null。</li></ul><p>总之浏览器能把大部分我们想到的富文本编辑器需要的功能都实现了，这里我就不一一演示了。感兴趣的同学可以查看 <a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand>MDN - document.execCommand</a>。</p><p>到这里，我相信你已经可以做出一个像模像样的富文本编辑器了。想想还挺激动的，但是呢，一切都没有结束，浏览器又一次坑了我们。</p><h1 id=实战开始，填坑的旅途><a href=#%E5%AE%9E%E6%88%98%E5%BC%80%E5%A7%8B%EF%BC%8C%E5%A1%AB%E5%9D%91%E7%9A%84%E6%97%85%E9%80%94 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>实战开始，填坑的旅途</h1><p>就在我们都以为开发如此简单的时候，实际上手却遇到了许多坑。</p><h2 id=修正浏览器的默认效果><a href=#%E4%BF%AE%E6%AD%A3%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E9%BB%98%E8%AE%A4%E6%95%88%E6%9E%9C aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>修正浏览器的默认效果</h2><p>浏览器提供的富文本效果并不总是好用的，下面介绍几个遇到的问题。</p><h3 id=回车换行><a href=#%E5%9B%9E%E8%BD%A6%E6%8D%A2%E8%A1%8C aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>回车换行</h3><p>当我们在编辑其中输入内容并回车换行继续输入后，可编辑框内容生成的节点和我们预期是不符的。<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/f.png alt width=296 height=56><br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/a.png alt width=237 height=47><br>可以看到最先输入的文字没有被包裹起来，而换行产生的内容，包裹元素是 <code>&lt;div></code> 标签。为了能够让文字被 <code>&lt;p></code> 元素包裹起来。 我们要在初始化的时候，向<code>&lt;div></code>默认插入<code>&lt;p>&lt;br>&lt;/p></code> 元素(<code>&lt;br></code>标签用来占位，有内容输入后会自动删除)。这样以后每次回车产生的新内容都会被<code>&lt;p></code> 元素包裹起来(在可编辑状态下，回车换行产生的新结构会默认拷贝之前的内容，包裹节点，类名等各种内容)。<br>我们还需要监听 keyUp 事件下 <code>event.keyCode === 8</code> 删除键。当编辑器中内容全被清空后(delete键也会把<code>&lt;p></code>标签删除)，要重新加入<code>&lt;p>&lt;br>&lt;/p></code>标签，并把光标定位在里面。</p><h3 id=插入-ul-和-ol-位置错误><a href=#%E6%8F%92%E5%85%A5-ul-%E5%92%8C-ol-%E4%BD%8D%E7%BD%AE%E9%94%99%E8%AF%AF aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>插入 ul 和 ol 位置错误</h3><p>当我们调用 <code>document.execCommand(\\\"insertUnorderedList\\\", false, null)</code> 来插入一个列表的时候，新的列表会被插入<code>&lt;p></code>标签中。<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/h.png alt width=215 height=149><br>为此我们需要每次调用该命令前做一次修正，参考代码如下：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>adjustList</span>(<span class=hljs-params></span>) </span>{\\n    <span class=hljs-keyword>let</span> lists = <span class=hljs-built_in>document</span>.querySelectorAll(<span class=hljs-string>\\\"ol, ul\\\"</span>);\\n     <span class=hljs-keyword>for</span> (<span class=hljs-keyword>let</span> i = <span class=hljs-number>0</span>; i &lt; lists.length; i++) {\\n        <span class=hljs-keyword>let</span> ele = lists[i]; <span class=hljs-comment>// ol</span>\\n        <span class=hljs-keyword>let</span> parentNode = ele.parentNode;\\n        <span class=hljs-keyword>if</span> (parentNode.tagName === <span class=hljs-string>'P'</span> &amp&amp parentNode.lastChild === parentNode.firstChild) {\\n                parentNode.insertAdjacentElement(<span class=hljs-string>'beforebegin'</span>, ele);\\n                parentNode.remove()\\n        }\\n    }\\n}</code></pre><p>这里有个附带的小问题，我试图在 <code>&lt;li>&lt;p>&lt;/p>&lt;/li></code> 维护这样的编辑器结构(默认是没有<code>&lt;p></code>标签的)。效果在 chrome 下运行很好。但是在 safari 中，回车永远不会产生新的 <code>&lt;li></code> 标签，这样就是去了该有的列表效果。</p><h3 id=插入分割线><a href=#%E6%8F%92%E5%85%A5%E5%88%86%E5%89%B2%E7%BA%BF aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>插入分割线</h3><p>调用 <code>document.execCommand('insertHorizontalRule', false, null);</code> 会插入一个<code>&lt;hr></code>标签。然而产生的效果却是这样的：<br><img src=https://caelumtian.github.io/2017/08/21/%E5%88%A9%E7%94%A8javascript%E6%90%AD%E5%BB%BA%E5%AF%8C%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8/i.gif alt width=191 height=60><br>光标和<code>&lt;hr></code>的效果一致了。为此要判断当前光标是否在 <code>&lt;li></code> 里面，如果是则在 <code>&lt;hr></code> 后面追加一个空的文本节点 <code>#text</code> 不是的话追加 <code>&lt;p>&lt;br>&lt;/p></code>。然后将光标定位在里面，可用如下方式查找。</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-comment>/**\\n * 查找父元素\\n * @param {String} root \\n * @param {String | Array} name \\n */</span>\\n<span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>findParentByTagName</span>(<span class=hljs-params>root, name</span>) </span>{\\n    <span class=hljs-keyword>let</span> parent = root;\\n    <span class=hljs-keyword>if</span> (<span class=hljs-keyword>typeof</span> name === <span class=hljs-string>\\\"string\\\"</span>) {\\n        name = [name];\\n    }\\n    <span class=hljs-keyword>while</span> (name.indexOf(parent.nodeName.toLowerCase()) === <span class=hljs-number>-1</span> &amp&amp parent.nodeName !== <span class=hljs-string>\\\"BODY\\\"</span> &amp&amp parent.nodeName !== <span class=hljs-string>\\\"HTML\\\"</span>) {\\n        parent = parent.parentNode;\\n    }\\n    <span class=hljs-keyword>return</span> parent.nodeName === <span class=hljs-string>\\\"BODY\\\"</span> || parent.nodeName === <span class=hljs-string>\\\"HTML\\\"</span> ? <span class=hljs-literal>null</span> : parent;\\n},</code></pre><h3 id=插入链接><a href=#%E6%8F%92%E5%85%A5%E9%93%BE%E6%8E%A5 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>插入链接</h3><p>调用 <code>document.execCommand('createLink', false, url);</code> 方法我们可以插入一个 url 链接，但是该方法不支持插入指定文字的链接。同时对已经有链接的位置可以反复插入新的链接。为此我们需要重写此方法。</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>insertLink</span>(<span class=hljs-params>url, title</span>) </span>{\\n    <span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>document</span>.getSelection(),\\n        range = selection.getRangeAt(<span class=hljs-number>0</span>);\\n    <span class=hljs-keyword>if</span>(range.collapsed) {\\n        <span class=hljs-keyword>let</span> start = range.startContainer,\\n            parent = Util.findParentByTagName(start, <span class=hljs-string>'a'</span>);\\n        <span class=hljs-keyword>if</span>(parent) {\\n            parent.setAttribute(<span class=hljs-string>'src'</span>, url);\\n        }<span class=hljs-keyword>else</span> {\\n            <span class=hljs-keyword>this</span>.insertHTML(<span class=hljs-string>`&lt;a href=\\\"<span class=hljs-subst>${url}</span>\\\"><span class=hljs-subst>${title}</span>&lt;/a>`</span>);\\n        }\\n    }<span class=hljs-keyword>else</span> {\\n        <span class=hljs-built_in>document</span>.execCommand(<span class=hljs-string>'createLink'</span>, <span class=hljs-literal>false</span>, url);\\n    }\\n} </code></pre><h3 id=设置-h1--h6-标题><a href=#%E8%AE%BE%E7%BD%AE-h1--h6-%E6%A0%87%E9%A2%98 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>设置 h1 ~ h6 标题</h3><p>浏览器没有现成的方法，但我们可以借助 <code>document.execCommand('formatBlock', false, tag)</code>, 来实现，代码如下：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>setHeading</span>(<span class=hljs-params>heading</span>) </span>{\\n    <span class=hljs-keyword>let</span> formatTag = heading,\\n        formatBlock = <span class=hljs-built_in>document</span>.queryCommandValue(<span class=hljs-string>\\\"formatBlock\\\"</span>);\\n    <span class=hljs-keyword>if</span> (formatBlock.length > <span class=hljs-number>0</span>  &amp &amp formatBlock.toLowerCase() === formatTag) {\\n        <span class=hljs-built_in>document</span>.execCommand(<span class=hljs-string>'formatBlock'</span>, <span class=hljs-literal>false</span>, <span class=hljs-string>``</span>);\\n    } <span class=hljs-keyword>else</span> {\\n        <span class=hljs-built_in>document</span>.execCommand(<span class=hljs-string>'formatBlock'</span>, <span class=hljs-literal>false</span>, <span class=hljs-string>``</span>);\\n    }\\n}</code></pre><h3 id=插入定制内容><a href=#%E6%8F%92%E5%85%A5%E5%AE%9A%E5%88%B6%E5%86%85%E5%AE%B9 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>插入定制内容</h3><p>当编辑器上传或加载附件的时候，要插入能够展示附件的 <code>&lt;div></code> 节点卡片到编辑中。这里我们借助 <code>document.execCommand('insertHTML', false, html);</code> 来插入内容。为了防止div被编辑，要设置 <code>contenteditable=\\\"false\\\"</code>哦。</p><h3 id=处理-paste-粘贴><a href=#%E5%A4%84%E7%90%86-paste-%E7%B2%98%E8%B4%B4 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>处理 paste 粘贴</h3><p>在富文本编辑器中，粘贴效果默认采用如下规则：</p><ol><li>如果是带有格式的文本，则保留格式(格式会被转换成html标签的形式)</li><li>粘贴图文混排的内容，图片可以显示，src 为图片真实地址。</li><li>通过复制图片来进行粘贴的时候，不能粘入内容</li><li>粘贴其他格式内容，不能粘入内容</li></ol><p>为了能够控制粘贴的内容，我们监听 <code>paste</code> 事件。该事件的 event 对象中会包含一个 clipboardData 剪切板对象。我们可以利用该对象的 getData 方法来获得带有格式和不带格式的内容，如下。</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>let</span> plainText = event.clipboardData.getData(<span class=hljs-string>'text/plain'</span>);  <span class=hljs-comment>// 无格式文本</span>\\n<span class=hljs-keyword>let</span> plainHTML = event.clipboardData.getData(<span class=hljs-string>'text/html'</span>);   <span class=hljs-comment>// 有格式文本</span></code></pre><p>之后调用 <code>document.execCommand('insertText', false, plainText);</code> 或 <code>document.execCommand('insertHTML', false, plainHTML;</code> 来重写编辑上的paste效果。</p><p>然而对于规则 3 ，上述方案就无法处理了。这里我们要引入 <code>event.clipboardData.items</code> 。这是一个数组包含了所有剪切板中的内容对象。比如你复制了一张图片来粘贴，那么 <code>event.clipboardData.items</code> 的长度就为2： <code>items[0]</code> 为图片的名称，items[0].kind 为 'string', items[0].type 为 'text/plain' 或 'text/html'。获取内容方式如下：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript>items[<span class=hljs-number>0</span>].getAsString(<span class=hljs-function><span class=hljs-params>str</span> =></span> {\\n    <span class=hljs-comment>// 处理 str 即可</span>\\n}) </code></pre><p><code>items[1]</code> 为图片的二进制数据，items[1].kind 为'file'， items[1].type 为图片的格式。想要获取里面的内容，我们就需要创建 <code>FileReader</code> 对象了。示例代码如下：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-keyword>let</span> file = items[<span class=hljs-number>1</span>].getAsFile();\\n<span class=hljs-comment>// file.size 为文件大小</span>\\n<span class=hljs-keyword>let</span> reader = <span class=hljs-keyword>new</span> FileReader();\\nreader.onload = <span class=hljs-function><span class=hljs-keyword>function</span>(<span class=hljs-params></span>) </span>{\\n    <span class=hljs-comment>// reader.result 为文件内容，就可以做上传操作了</span>\\n}\\n<span class=hljs-keyword>if</span>(<span class=hljs-regexp>/image/</span>.test(item.type)) {\\n    reader.readAsDataURL(file);   <span class=hljs-comment>// 读取为 base64 格式</span>\\n}</code></pre><p>处理完图片，那么对于复制粘贴其他格式内容会怎么样呢？在 mac 中，如果你复制一个磁盘文件，event.clipboardData.items 的长度为 2。 items[0] 依然为文件名，然而 items[1] 则为图片了，没错，是文件的缩略图。</p><h3 id=输入法处理><a href=#%E8%BE%93%E5%85%A5%E6%B3%95%E5%A4%84%E7%90%86 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>输入法处理</h3><p>当使用输入发的时候，有时候会发生一些意想不到的事情。 比如百度输入法可以输入一张本地图片，为此我们需要监听输入法产生的内容做处理。这里通过如下两个事件处理：</p><ul><li>compositionstart: 当浏览器有非直接的文字输入时, compositionstart事件会以同步模式触发</li><li>compositionend: 当浏览器是直接的文字输入时, compositionend会以同步模式触发</li></ul><h2 id=修复移动端的问题><a href=#%E4%BF%AE%E5%A4%8D%E7%A7%BB%E5%8A%A8%E7%AB%AF%E7%9A%84%E9%97%AE%E9%A2%98 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>修复移动端的问题</h2><p>在移动端，富文本编辑器的问题主要集中在光标和键盘上面。我这里介绍几个比较大的坑。</p><h3 id=自动获取焦点><a href=#%E8%87%AA%E5%8A%A8%E8%8E%B7%E5%8F%96%E7%84%A6%E7%82%B9 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>自动获取焦点</h3><p>如果想让我们的编辑器自动获得焦点，弹出软键盘，可以利用 <code>focus()</code> 方法。然而在 ios 下，死活没有结果。这主要是因为 ios safari 中，为了安全考虑不允许代码获得焦点。只能通过用户交互点击才可以。还好，这一限制可以去除：</p><pre><code class=\\\"hljs language-object-c\\\"data-query={} data-lang=object-c>[self.appWebView setKeyboardDisplayRequiresUserAction:NO]</code></pre><h3 id=ios-下回车换行，滚动条不会自动滚动><a href=#ios-%E4%B8%8B%E5%9B%9E%E8%BD%A6%E6%8D%A2%E8%A1%8C%EF%BC%8C%E6%BB%9A%E5%8A%A8%E6%9D%A1%E4%B8%8D%E4%BC%9A%E8%87%AA%E5%8A%A8%E6%BB%9A%E5%8A%A8 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>iOS 下回车换行，滚动条不会自动滚动</h3><p>在 iOS 下，当我们回车换行的时候，滚动条并不会随着滚动下去。这样光标就可能被键盘挡住，体验不好。为了解决这一问题，我们就需要监听 <code>selectionchange</code> 事件，触发时，计算每次光标编辑器顶端距离，之后再调用 window.scroll() 即可解决。问题在于我们要如何计算当前光标的位置，如果仅是计算光标所在父元素的位置很有可能出现偏差(多行文本计算不准)。我们可以通过创建一个临时 <code>&lt;span></code> 元素查到光标位置，计算<code>&lt;span></code>元素的位置即可。代码如下：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>getCaretYPosition</span>(<span class=hljs-params></span>) </span>{\\n    <span class=hljs-keyword>let</span> sel = <span class=hljs-built_in>window</span>.getSelection(),\\n        range = sel.getRangeAt(<span class=hljs-number>0</span>);\\n    <span class=hljs-keyword>let</span> span = <span class=hljs-built_in>document</span>.createElement(<span class=hljs-string>'span'</span>);\\n    range.collapse(<span class=hljs-literal>false</span>);\\n    range.insertNode(span);\\n    <span class=hljs-keyword>var</span> topPosition = span.offsetTop;\\n    span.parentNode.removeChild(span);\\n    <span class=hljs-keyword>return</span> topPosition;\\n}</code></pre><p>正当我开心的时候，安卓端反应，编辑器越编辑越卡。什么鬼？我在 chrome 上线检查了一下，发现 <code>selectionchange</code> 函数一直在运行，不管有没有操作。 在逐一排查的时候发现了这么一个事实。<code>range.insertNode</code> 函数同样触发 <code>selectionchange</code> 事件。这样就形成了一个死循环。这个死循环在 safari 中就不会产生，只出现在 safari 中，为此我们就需要加上浏览器类型判断了。</p><h3 id=键盘弹起遮挡输入部分><a href=#%E9%94%AE%E7%9B%98%E5%BC%B9%E8%B5%B7%E9%81%AE%E6%8C%A1%E8%BE%93%E5%85%A5%E9%83%A8%E5%88%86 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>键盘弹起遮挡输入部分</h3><p>网上对于这个问题主要的方案就是，设置定时器。局限与前端，确实只能这采用这样笨笨的解决。最后我们让 iOS 同学在键盘弹出的时候，将 webview 高度减去软键盘高度就解决了。</p><pre><code class=\\\"hljs language-object-c\\\"data-query={} data-lang=object-c><span class=hljs-symbol>CGFloat</span> webviewY = <span class=hljs-number>64</span>.<span class=hljs-number>0</span> + <span class=hljs-keyword>self.noteSourceView.height;\\n</span><span class=hljs-keyword>self.appWebView.frame </span>= CGRectMake(<span class=hljs-number>0</span>, webviewY, <span class=hljs-keyword>BDScreenWidth, </span><span class=hljs-keyword>BDScreenHeight </span>- webviewY - height)<span class=hljs-comment>; </span></code></pre><h3 id=插入图片失败><a href=#%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87%E5%A4%B1%E8%B4%A5 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>插入图片失败</h3><p>在移动端，通过调用 jsbridge 来唤起相册选择图片。之后调用 <code>insertImage</code> 函数来向编辑器插入图片。然而，插入图片一直失败。最后发现是因为早 safari 下，如果编辑器失去了焦点，那么 <code>selection</code> 和 <code>range</code> 对象将销毁。因此调用 <code>insertImage</code> 时，并不能获得光标所在位置，因此失败。为此需要增加，<code>backupRange()</code> 和 <code>restoreRange()</code> 函数。当页面失去焦点的时候记录 range 信息，插入图片前恢复 range 信息。</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript>backupRange() {\\n    <span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection();\\n    <span class=hljs-keyword>let</span> range = selection.getRangeAt(<span class=hljs-number>0</span>);\\n    <span class=hljs-keyword>this</span>.currentSelection = {\\n        <span class=hljs-string>\\\"startContainer\\\"</span>: range.startContainer,\\n        <span class=hljs-string>\\\"startOffset\\\"</span>: range.startOffset,\\n        <span class=hljs-string>\\\"endContainer\\\"</span>: range.endContainer,\\n        <span class=hljs-string>\\\"endOffset\\\"</span>: range.endOffset\\n    }\\n}\\nrestoreRange() {\\n    <span class=hljs-keyword>if</span> (<span class=hljs-keyword>this</span>.currentSelection) {\\n        <span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection();\\n            selection.removeAllRanges();\\n        <span class=hljs-keyword>let</span> range = <span class=hljs-built_in>document</span>.createRange();\\n        range.setStart(<span class=hljs-keyword>this</span>.currentSelection.startContainer, <span class=hljs-keyword>this</span>.currentSelection.startOffset);\\n        range.setEnd(<span class=hljs-keyword>this</span>.currentSelection.endContainer, <span class=hljs-keyword>this</span>.currentSelection.endOffset);\\n        <span class=hljs-comment>// 向选区中添加一个区域</span>\\n        selection.addRange(range);\\n    }\\n}</code></pre><p>在 chrome 中，失去焦点并不会清除 <code>seleciton</code> 对象和 <code>range</code> 对象，这样我们轻轻松松一个 <code>focus()</code> 就搞定了。</p><p>重要问题就这么多，限于篇幅限制其他的问题省略了。总体来说，填坑花了开发的大部分时间。</p><h1 id=其他功能><a href=#%E5%85%B6%E4%BB%96%E5%8A%9F%E8%83%BD aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>其他功能</h1><p>基础功能修修补补以后，实际项目中有可能遇到一些其他的需求，比如当前光标所在文字内容状态啊，图片拖拽放大啊，待办列表功能，附件卡片等功能啊，markdown切换等等。在了解了js 富文本的种种坑之后，range 对象的操作之后，相信这些问题你都可以轻松解决。这里最后提几个做扩展功能时候遇到的有去的问题。</p><h2 id=回车换行带格式><a href=#%E5%9B%9E%E8%BD%A6%E6%8D%A2%E8%A1%8C%E5%B8%A6%E6%A0%BC%E5%BC%8F aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>回车换行带格式</h2><p>前面已经说过了，富文本编辑器的机制就是这样，当你回车换行的时候新产生的内容和之前的格式一模一样。如果我们利用 <code>.card</code> 类来定义了一个卡片内容，那么换行产生的新的段落都将含有 <code>.card</code> 类且结构也是直接 copy 过来的。我们想要屏蔽这种机制，于是尝试在 keydown 的阶段做处理(如果在 keyup 阶段处理用户体验不好)。然而，并没有什么用，因为用户自定义的 keydown 事件要在 浏览器富文本的默认 keydown 事件之前触发，这样你就做不了任何处理。<br>为此我们为这类特殊的个体都添加一个 property 属性，添加在 property 上的内容是不会被copy下来的。这样以后就可以区分出来了，从而做对应的处理。</p><h2 id=获取当前光标所在处样式><a href=#%E8%8E%B7%E5%8F%96%E5%BD%93%E5%89%8D%E5%85%89%E6%A0%87%E6%89%80%E5%9C%A8%E5%A4%84%E6%A0%B7%E5%BC%8F aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>获取当前光标所在处样式</h2><p>这里主要是考虑 下划线，删除线之类的样式，这些样式都是用标签类描述的，所以要遍历标签层级。直接上代码：</p><pre><code class=\\\"hljs language-javascript\\\"data-query={} data-lang=javascript><span class=hljs-function><span class=hljs-keyword>function</span> <span class=hljs-title>getCaretStyle</span>(<span class=hljs-params></span>) </span>{\\n    <span class=hljs-keyword>let</span> selection = <span class=hljs-built_in>window</span>.getSelection(),\\n        range = selection.getRangeAt(<span class=hljs-number>0</span>);\\n        aimEle = range.commonAncestorContainer,\\n        tempEle = <span class=hljs-literal>null</span>;\\n    <span class=hljs-keyword>let</span> tags = [<span class=hljs-string>\\\"U\\\"</span>, <span class=hljs-string>\\\"I\\\"</span>, <span class=hljs-string>\\\"B\\\"</span>, <span class=hljs-string>\\\"STRIKE\\\"</span>],\\n        result = [];\\n    <span class=hljs-keyword>if</span>(aimEle.nodeType === <span class=hljs-number>3</span>) {\\n        aimEle = aimEle.parentNode;\\n    }\\n    tempEle = aimEle;\\n    <span class=hljs-keyword>while</span>(block.indexOf(tempEle.nodeName.toLowerCase()) === <span class=hljs-number>-1</span>) {\\n        <span class=hljs-keyword>if</span>(tags.indexOf(tempEle.nodeName) !== <span class=hljs-number>-1</span>) {\\n            result.push(tempEle.nodeName);\\n        }\\n        tempEle = tempEle.parentNode;\\n    }\\n    <span class=hljs-keyword>let</span> viewStyle = {\\n        <span class=hljs-string>\\\"italic\\\"</span>: result.indexOf(<span class=hljs-string>\\\"I\\\"</span>) !== <span class=hljs-number>-1</span> ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>,\\n        <span class=hljs-string>\\\"underline\\\"</span>: result.indexOf(<span class=hljs-string>\\\"U\\\"</span>) !== <span class=hljs-number>-1</span> ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>,\\n        <span class=hljs-string>\\\"bold\\\"</span>: result.indexOf(<span class=hljs-string>\\\"B\\\"</span>) !== <span class=hljs-number>-1</span> ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>,\\n        <span class=hljs-string>\\\"strike\\\"</span>: result.indexOf(<span class=hljs-string>\\\"STRIKE\\\"</span>) !== <span class=hljs-number>-1</span> ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>\\n    }\\n    <span class=hljs-keyword>let</span> styles = <span class=hljs-built_in>window</span>.getComputedStyle(aimEle, <span class=hljs-literal>null</span>);\\n    viewStyle.fontSize = styles[<span class=hljs-string>\\\"fontSize\\\"</span>],\\n    viewStyle.color = styles[<span class=hljs-string>\\\"color\\\"</span>],\\n    viewStyle.fontWeight = styles[<span class=hljs-string>\\\"fontWeight\\\"</span>],\\n    viewStyle.fontStyle = styles[<span class=hljs-string>\\\"fontStyle\\\"</span>],\\n    viewStyle.textDecoration = styles[<span class=hljs-string>\\\"textDecoration\\\"</span>];\\n    viewStyle.isH1 = Util.findParentByTagName(aimEle, <span class=hljs-string>\\\"h1\\\"</span>) ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>;\\n    viewStyle.isH2 = Util.findParentByTagName(aimEle, <span class=hljs-string>\\\"h2\\\"</span>) ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>;\\n    viewStyle.isP = Util.findParentByTagName(aimEle, <span class=hljs-string>\\\"p\\\"</span>) ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>;\\n    viewStyle.isUl = Util.findParentByTagName(aimEle, <span class=hljs-string>\\\"ul\\\"</span>) ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>;\\n    viewStyle.isOl = Util.findParentByTagName(aimEle, <span class=hljs-string>\\\"ol\\\"</span>) ? <span class=hljs-literal>true</span> : <span class=hljs-literal>false</span>;\\n    <span class=hljs-keyword>return</span> viewStyle;\\n} </code></pre><h1 id=最后说一句><a href=#%E6%9C%80%E5%90%8E%E8%AF%B4%E4%B8%80%E5%8F%A5 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>最后说一句</h1><p>该项目目前提测中，所以呢，一但发现有意思的坑，我会及时补充的。</p><h1 id=参考内容><a href=#%E5%8F%82%E8%80%83%E5%86%85%E5%AE%B9 aria-hidden=true><span class=\\\"icon icon-link\\\"></span></a>参考内容</h1><ul><li><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Document/execCommand>MDN - document.execCommand</a></li><li><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Selection>MDN - selection</a></li><li><a href=https://developer.mozilla.org/zh-CN/docs/Web/API/Range>MDN - range</a></li><li><a href=http://frontenddev.org/article/compatible-with-processing-and-chinese-input-method-to-optimize-the-input-events.html>input 事件兼容处理以及中文输入法优化</a></li><li><a href=https://segmentfault.com/a/1190000004288686>js获取剪切板内容，js控制图片粘贴</a></li><li><a href=http://blog.csdn.net/ll845876425/article/details/51884736>iOS UIWebView 全属性详解</a></li></ul>\",\n  \"extra\": {\n    \"_image-loader_\": []\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/picidae/lib/lib/loaders/markdown-loader!./doc/fe/利用-javascript-实现富文本编辑器.md\n// module id = 824\n// module chunks = 30"],"sourceRoot":""}