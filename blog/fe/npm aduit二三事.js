webpackJsonp([40,56],{814:function(e,n){e.exports={content:'<h2 id=前言：从一个-bug-说起><a href=#%E5%89%8D%E8%A8%80%EF%BC%9A%E4%BB%8E%E4%B8%80%E4%B8%AA-bug-%E8%AF%B4%E8%B5%B7 aria-hidden=true><span class="icon icon-link"></span></a>前言：从一个 bug 说起</h2><p>最近碰到一个问题，使用一个框架的时候使用公司内部的镜像装怎么都跑不起来, 然而只要改成官方的镜像就没问题，于是去对比了下 <code>package.lock</code> 文件，如图：</p><img src=https://eux-public.bj.bcebos.com/2018/07/02/df233513dd3e36bafdd4a15a69415bdc.jpg alt width=1202 height=761><p>很明显可以看出用我厂的镜像装出来的 <code>nanomatch</code> 是 <code>1.2.11</code> 的版本，而官方装的 <code>1.2.9</code>，心里一愣我去还能超前，老早听说 <code>npm@6</code> 的一主要特征是安全机制，脑洞了一下难道官方 <code>npm</code> 源能判断是不是有问题的包还能自动回滚到稳定版本？</p><p>研究了一番，正文开始：</p><h2 id=npm-audit-命令><a href=#npm-audit-%E5%91%BD%E4%BB%A4 aria-hidden=true><span class="icon icon-link"></span></a>npm audit 命令</h2><p>首先看<a href=https://medium.com/npm-inc/announcing-npm-6-5d0b1799a905>官方文档</a>，<code>npm@6</code> 的一大更新是新增了 <code>npm audit</code> 命令</p><blockquote><p><strong>Note: The npm audit command is available in npm@6. To upgrade, run npm install npm@latest -g.</strong></p><p>The <code>npm audit</code> command submits a description of the dependencies configured in your package to your default registry and asks for a report of known vulnerabilities. npm audit checks direct dependencies, devDependencies, bundledDependencies, and optionalDependencies, but does not check peerDependencies.</p></blockquote><p>该命令会在项目中更新或者下载新的依赖包之后会自动运行，如果你在项目中使用了具有已知安全问题的依赖，就收到官方的警告通知。</p><p>为了复现，随便找了一个没那么官方的项目 <a href=https://github.com/mrvautin/adminMongo>adminMongo</a> 并执行 <code>npm install</code> 试试，果然</p><pre><code data-query={} data-lang>found 5 vulnerabilities (2 low, 1 moderate, 1 high, 1 critical)\n  run `npm audit fix` to fix them, or `npm audit` for details\n</code></pre><p>再执行下 <code>npm audit</code> 查看详情，列表很清晰。</p><img src=https://eux-public.bj.bcebos.com/2018/07/03/9D8FAEFD-85A5-45C2-8DCF-7B312AB9204D.png alt width=1232 height=944><p>执行 <code>npm audit fix</code>，发现并没有能自动的帮我 fix 掉这些错误。</p><pre><code class="hljs language-bash"data-query={} data-lang=bash>fixed 0 of 5 vulnerabilities <span class=hljs-keyword>in</span> 1295 scanned packages\n  2 package updates <span class=hljs-keyword>for</span> 5 vulns involved breaking changes\n  (use `npm audit fix --force` to install breaking changes; or <span class=hljs-keyword>do</span> it by hand)</code></pre><p>根据提示尝试执行 <code>npm audit fix --force</code>，发现他帮我把包自动更新到了推荐版本（<code>supertest@3.1.0</code>，<code>mocha@5.2.0</code>）。</p><p>ps. 直接运行 <code>--force</code> 的行为不要学习，对于没能自动修复的问题，说明肯定出现了 <code>SEMVER WARNING</code> 之类的警告，这意味着推荐的修复版本存在让代码出问题的可能，主要发生在依赖包更改了 API 或者升级了大版本的情况下（semantic version major change，比如我这个项目的 <code>supertest</code> 版本是 1.2.0，而推荐的是 3.1.0）。这时候就需要格外的小心甚至需要改动一些自己的代码了。</p><p>另外还有一种情况，就是官方发现了漏洞，但是目前没有可用的补丁。这时候就是个体力劳动了 :)</p><p>看看这命令到底帮我们干了啥，简单翻译了一下 <a href=https://docs.npmjs.com/cli/audit>官方文档</a></p><pre><code class="hljs language-bash"data-query={} data-lang=bash><span class=hljs-comment># 扫描项目漏洞把不安全的依赖项自动更新到兼容性版本</span>\nnpm audit fix\n\n<span class=hljs-comment># 在不修改 node_modules 的情况下执行 audit fix，仍然会更改 pkglock</span>\nnpm audit fix --package-lock-only\n\n<span class=hljs-comment># 跳过更新 devDependencies</span>\nnpm audit fix --only=prod\n\n<span class=hljs-comment># 强制执行 audit fix 安装最新的依赖项（toplevel）</span>\nnpm audit fix --force\n\n<span class=hljs-comment># 单纯的获取 audit fix 会做的事，并以 json 格式输出。</span>\nnpm audit fix --dry-run --json\n\n<span class=hljs-comment># 获取详情</span>\nnpm audit\n\n<span class=hljs-comment># 以 JSON 格式打印报告</span>\nnpm audit --json</code></pre><p>至于如何关闭安全检查，可以采用以下方式：</p><ul><li>安装单个包关闭安全审查: <code>npm install example-package-name --no-audit</code></li><li>安装所有包关闭安全审查 - 运行 <code>npm set audit false</code> - 手动将 <code>~/.npmrc</code> 配置文件中的 <code>audit</code> 修改为 <code>false</code></li></ul><h2 id=audit-报告><a href=#audit-%E6%8A%A5%E5%91%8A aria-hidden=true><span class="icon icon-link"></span></a>audit 报告</h2><p>通过查看文档和源码发现，<code>npm aduit</code> 主要动作就是在 <code>npm install</code> 完成之后把需要检查的包的信息发送给一个官方接口, 再根据返回信息生成一个包含包名称、漏洞严重性、简介, 路径等的报告。处理格式化什么的主要在于 <a href=https://www.npmjs.com/package/npm-audit-report>npm-audit-report</a> 模块，有兴趣的也可以研究下。</p><p>那么报告是根据什么生成的呢，根据 audit 的提示信息我们能发现一个 <a href=https://nodesecurity.io/>node 安全平台</a>，进去首页就看到一句类似『好消息，2018 年 4 月 10 号，npm 正式入驻我们平台』的通知。看来 audit 的数据来源也大概知道了。</p><p>该平台的公布一个漏洞的步骤跟大多安全平台类似：</p><ol><li>漏洞被披露 or 反馈到此安全平台。</li><li>通知维护者相关信息（如果不是维护者自己汇报的）。</li><li>通知使用该依赖的用户，给给予推荐性的解决方案。</li><li>修复完成之后发布公开补丁，并申请 <a href=http://cve.mitre.org/>CVE</a> 。</li><li>如果 45 天之后还没有修复，则通知超时并公开漏洞。</li></ol><h2 id=总结><a href=#%E6%80%BB%E7%BB%93 aria-hidden=true><span class="icon icon-link"></span></a>总结</h2><p>总的来说，安全的问题不容忽视。 很多时候，大家拿到项目之后直接 <code>npm install</code>，只要项目能成功运行基本没有人会去关注装了什么。一大堆错综复杂的相互关联的依赖包，就算开发者有安全意识，也缺乏解决安全漏洞的手段。 此时有个官方平台来帮忙管理收集反馈给出报告给出建议等，是一件很值得称赞的事。</p><h2 id=最后的最后><a href=#%E6%9C%80%E5%90%8E%E7%9A%84%E6%9C%80%E5%90%8E aria-hidden=true><span class="icon icon-link"></span></a>最后的最后</h2><p>想到目前已经有很大一部分同学转移去了 <code>yarn</code> 阵营，甚至有一些并不知道为什么就转过去了只是当时很多人推荐使用它。其实主要是在 npm v4 时期安裝超慢，才会让 yarn 崛起，在 v5 的时候其实改善不少了，v6 应该是再次强调想夺回这么一部分用户 😐？有兴趣的可以再自行研究下 yarn 和 npm 的对比， 这里有一个 <a href=https//github.com/appleboy/npm-vs-yarn>npm5.7.1 vs yarn1.5.1 数据上的比较以及比较方法</a>。</p><p>再有其实 npm 现在也有很多功能似乎用的人不是很多，篇幅有限简单提几个自认为还不错的。 1. <code>npx</code> 一个随着 <code>npm 5.2.0</code> 发布的命令，会帮你执行依赖包里的二进制文件。比如对于没有全局安装的命令你想执行的话就只能 <code>./node_modules/.bin/webpack -v</code>，有 <code>npx</code> 之后就可以直接使用 <code>npx webpack -v</code>。另外还能单次命令而不需要全局安装，比如 <code>npx create-react-app my-app</code> 2. 更改 npm 安装包的目录<code>npm config set prefix &lt;new_path></code>（在没有 sudo 权限的场景很有用） 3. 在开发 npm 模块的时候使用 <code>npm link</code> 4. ...</p><p>至于前面说的问题解决方案，咨询了官方同学以及翻了下 nanomatch 的 <a href=https://github.com/micromatch/nanomatch/issues/15>issue</a>，发现是包的问题。 (npm 发布了错误版本 1.11 然后及时回滚到了 1.9 并且删除了 11 的版本, 但是我厂镜像没及时同步版本还是 1.11, 而自己刚好卡这间隙)，果然当晚回到家之后再看了一眼一切又恢复正常，就当一个学习知识的经历。</p><h2 id=参考资料><a href=#%E5%8F%82%E8%80%83%E8%B5%84%E6%96%99 aria-hidden=true><span class="icon icon-link"></span></a>参考资料</h2><ul><li><a href=https://docs.npmjs.com/cli/audit>npm audit 文档</a></li><li><a href=https://zhuanlan.zhihu.com/p/27891196>【科普】不了解CVE 就不能算是安全圈的人 来看看官方权威解答</a></li></ul>',extra:{"_image-loader_":[]}}}});
//# sourceMappingURL=npm aduit二三事.js.map